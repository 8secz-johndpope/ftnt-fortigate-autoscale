{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template does the majority of the work for deploying FortiGate Autoscale. It is not for direct use.",
    "Parameters": {
        "ResourceTagPrefix": {
            "Type": "String",
            "AllowedPattern": "[0-9a-zA-Z@.#-]+",
            "MaxLength": 64,
            "ConstraintDescription": "Resource tag prefix can include numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64.",
            "Description": "The ResourceGroup Tag Key used on all resources and as the name prefix of all applicable resources. Can only contain numbers, lowercase letters, uppercase letters, ampersat(@), hyphens (-), period (.), and hash (#). Max length is 64."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "An alternative name prefix to be used on a resource that the 'Resource tag prefix' cannot apply to. Can only contain numbers, lowercase letters, and uppercase letters. Max length is 10."
        },
        "S3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Deployment resource S3 bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "Name of the S3 bucket that contains the FortiGate Autoscale deployment package. Can contain numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "S3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Deployment package S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "Name of the S3 folder that stores the FortiGate Autoscale deployment resources. Can contain numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). If provided, it must end with a forward slash (/)."
        },
        "UniqueId": {
            "Type": "String",
            "MaxLength": "8",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and digits",
            "Description": "An automatically generated random string as a unique ID for all resources in the deployment stack and nested stacks."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The ID of the existing VPC where FortiGate Autoscale will be deployed. The VPC must have the option 'DNS hostnames' enabled and each of the two AZs in the VPC must have at least 1 public subnet and at least 1 private subnet."
        },
        "VpcCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block of the selected existing VPC. This can be found in parentheses in the VPC ID parameter selection."
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The ID of the public subnet 1 located in Availability Zone 1 of the selected existing VPC."
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The ID of the public subnet 2 located in Availability Zone 2 of the selected existing VPC."
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The ID of the private subnet 1 located in Availability Zone 1 of the selected existing VPC. This subnet will be protected by the FortiGates in the public subnet of the same AZ."
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "The ID of the private subnet 2 located in Availability Zone 2 of the selected existing VPC. This subnet will be protected by the FortiGates in the public subnet of the same AZ."
        },
        "PrivateSubnetRouteTable": {
            "Type": "String",
            "Description": "Route table ID associated with the two private subnets."
        },
        "FortiGateInstanceType": {
            "Type": "String",
            "Description": "Instance type for the FortiGates in the Auto Scaling group. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/."
        },
        "FortiOSVersion": {
            "Type": "String",
            "Description": "FortiOS version."
        },
        "LifecycleHookTimeout": {
            "Type": "Number",
            "Default": 480,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The amount of time (in seconds) that can elapse before the FortiGate Autoscale lifecycle hook times out. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The Auto Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgDesiredCapacityByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "The number of FortiGate instances the BYOL Auto Scaling group should have at any time. For High Availability, ensure there are at least 2 FortiGates in total in any or both of the Auto Scaling groups. For specific use cases, set to 0 for PAYG-only, and > 0 for BYOL-only or hybrid licensing. Minimum is 0."
        },
        "FgtAsgMinSizeByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Minimum number of FortiGate instances in the BYOL Auto Scaling group. For specific use cases, set to 0 for PAYG-only, and > 0 for BYOL-only or hybrid licensing. Minimum is 0."
        },
        "FgtAsgMaxSizeByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Maximum number of FortiGate instances in the BYOL Auto Scaling group. For specific use cases, set to 0 for PAYG-only, and > 0 for BYOL-only or hybrid licensing. Minimum is 0."
        },
        "FgtAsgDesiredCapacityPayg": {
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "The number of FortiGate instances the PAYG Auto Scaling group should have at any time. For High Availability, ensure there are at least 2 FortiGates in total in any or both of the Auto Scaling groups. For specific use cases, set to 0 for BYOL-only, > 0 for PAYG-only, and >= 0 for hybrid licensing. Minimum is 0."
        },
        "FgtAsgMinSizePayg": {
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Minimum number of FortiGate instances in the PAYG Auto Scaling group. For specific use cases, set to 0 for BYOL-only, > 0 for PAYG-only, and >= 0 for hybrid licensing. Minimum is 0."
        },
        "FgtAsgMaxSizePayg": {
            "Type": "Number",
            "Default": 6,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Maximum number of FortiGate instances in the PAYG Auto Scaling group. For specific use cases, set to 0 for BYOL-only, and > 0 for PAYG-only or hybrid licensing. Minimum is 0."
        },
        "FgtAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FgtAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FgtAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "MaxLength": "128",
            "Description": "A secret key for the FortiGate-VM instances to securely communicate with each other. Must contain numbers and letters. Max length is 128."
        },
        "FortiGateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Minimum is 1. Maximum is 65535. Do not use the FortiGate reserved ports 443, 541, 514, or 703."
        },
        "FortiGateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is highly not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must specify an admin access key pair for FortiGate instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "MasterElectionTimeout": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 90,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 90 and 3600.",
            "Description": "The maximum time (in seconds) to wait for a master election to complete. Minimum is 30. Maximum is 3600."
        },
        "HeartBeatInterval": {
            "Type": "Number",
            "Default": 30,
            "MinValue": 30,
            "MaxValue": 90,
            "ConstraintDescription": "must be a valid number between 30 and 90.",
            "Description": "The length of time (in seconds) that a FortiGate-VM waits between sending heartbeat requests to the Autoscale handler. Minimum is 30. Maximum is 90."
        },
        "HeartBeatLossCount": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid number between 1 and 65535.",
            "Description": "Number of consecutively lost heartbeats. When the Heartbeat Loss Count has been reached, the VM is deemed unhealthy and fail-over activities will commence."
        },
        "HeartBeatDelayAllowance": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "Description": "The maximum amount of time (in seconds) allowed for network latency of the FortiGate heartbeat arriving at the Autoscale handler. Minimum is 0."
        },
        "LoadBalancingTrafficProtocol": {
            "Type": "String",
            "Default": "HTTPS",
            "AllowedValues": ["HTTP", "HTTPS", "TCP"],
            "ConstraintDescription": "value must be chosen from the provided options.",
            "Description": "Use this protocol to load balance traffic."
        },
        "LoadBalancingTrafficPort": {
            "Type": "Number",
            "Default": 443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Balance web service traffic over this port if the internal web-service load balancer is enabled. Minimum is 1. Maximum is 65535."
        },
        "LoadBalancingHealthCheckThreshold": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "ConstraintDescription": "must be a valid number not less than 3.",
            "Description": "The number of consecutive health check failures required before considering a FortiGate instance unhealthy. Minimum is 3."
        },
        "InternalLoadBalancingOptions": {
            "Type": "String",
            "Default": "add a new internal load balancer",
            "AllowedValues": [
                "add a new internal load balancer",
                "use a load balancer specified below",
                "do not need one"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Add an optional pre-defined load balancer to route traffic to web service in the private subnets. You can optionally use your own one or decide to not need one."
        },
        "InternalTargetGroupHealthCheckPath": {
            "Type": "String",
            "Default": "/",
            "AllowedPattern": "^/[0-9a-zA-Z-/]*$",
            "MaxLength": 1024,
            "ConstraintDescription": "This path must begin with a '/' character, and can be at most 1024 characters in length.",
            "Description": "Optional. The destination path for health checks. This path must begin with a '/' character, and can be at most 1024 characters in length."
        },
        "InternalLoadBalancerDnsName": {
            "Type": "String",
            "Default": "",
            "Description": "Optional. Specify the DNS Name of an existing internal load balancer used to route traffic from a FortiGate to targets in a specified target group. Leave it blank if you don't use an existing load balancer."
        },
        "GetLicenseGracePeriod": {
            "Type": "Number",
            "Default": 600,
            "MinValue": 300,
            "ConstraintDescription": "must be a valid number not less than 300.",
            "Description": "The minimum time (in seconds) permitted before a distributed license can be revoked from a non-responsive FortiGate and re-distributed. Minimum is 300."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "IfNewInternalLoadBalancer": {
            "Fn::Equals": [
                {
                    "Ref": "InternalLoadBalancingOptions"
                },
                "add a new internal load balancer"
            ]
        },
        "IfPAYGOnly": {
            "Fn::And": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "FgtAsgDesiredCapacityByol"
                        },
                        0
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "FgtAsgMaxSizeByol"
                        },
                        0
                    ]
                }
            ]
        },
        "IfBYOLOnly": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "FgtAsgMinSizeByol"
                                },
                                0
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "FgtAsgMaxSizeByol"
                                },
                                0
                            ]
                        }
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "FgtAsgMinSizePayg"
                        },
                        0
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "FgtAsgMaxSizePayg"
                        },
                        0
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "FortiGateKeyMap": {
            "FortiGateVersionPayg": {
                "606": "FGTVM64PAYG606",
                "621": "FGTVM64PAYG621"
            },
            "FortiGateVersionByol": {
                "606": "FGTVM64BYOL606",
                "621": "FGTVM64BYOL621"
            }
        },
        "AWSAMIRegionMap": {
            "AMI": {
                "FGTVM64PAYG606": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0272 (6.0.6) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-048fbaf13155f2abf.4",
                "FGTVM64PAYG621": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0932 (6.2.1) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-094f6bfd5592431e0.4",
                "FGTVM64BYOL606": "aws-marketplace/FortiGate-VM64-AWS build0272 (6.0.6) GA-e5936f4a-0d69-479f-919c-d5e158bd4d12-ami-0e6cb6935ef8eff9c.4",
                "FGTVM64BYOL621": "aws-marketplace/FortiGate-VM64-AWS build0932 (6.2.1) GA-e5936f4a-0d69-479f-919c-d5e158bd4d12-ami-07594bc884cf7d660.4"
            },
            "ap-northeast-1": {
                "FGTVM64PAYG621": "ami-09cdcd4c2445e2c70",
                "FGTVM64PAYG606": "ami-0760c962419fedf03",
                "FGTVM64BYOL621": "ami-0701aa07e48c4d908",
                "FGTVM64BYOL606": "ami-0f0a78a20ad3ba273"
            },
            "ap-northeast-2": {
                "FGTVM64PAYG621": "ami-0a796272ef341a29d",
                "FGTVM64PAYG606": "ami-0387943a776b4b60d",
                "FGTVM64BYOL621": "ami-0a162910b165e39ac",
                "FGTVM64BYOL606": "ami-0047275a13f939709"
            },
            "ap-south-1": {
                "FGTVM64PAYG621": "ami-0b71271bc53238423",
                "FGTVM64PAYG606": "ami-067e008638637e71e",
                "FGTVM64BYOL621": "ami-0edaf606c44aa76c2",
                "FGTVM64BYOL606": "ami-0c20ecc6ad06cfe92"
            },
            "ap-southeast-1": {
                "FGTVM64PAYG621": "ami-02502caa43eb2d055",
                "FGTVM64PAYG606": "ami-04d5de37af6752b20",
                "FGTVM64BYOL621": "ami-05d2f32cd86583980",
                "FGTVM64BYOL606": "ami-0db3a551c908b4397"
            },
            "ap-southeast-2": {
                "FGTVM64PAYG621": "ami-09c29aa6a848e77b9",
                "FGTVM64PAYG606": "ami-03bdee3ae0c361cc0",
                "FGTVM64BYOL621": "ami-04b7b0eb6f540c1c2",
                "FGTVM64BYOL606": "ami-0985167ad07be2604"
            },
            "ca-central-1": {
                "FGTVM64PAYG621": "ami-06068c796e12ce93a",
                "FGTVM64PAYG606": "ami-0a0e08538c0d5496b",
                "FGTVM64BYOL621": "ami-0dbfcb720983c1ee5",
                "FGTVM64BYOL606": "ami-032190287091e489d"
            },
            "eu-central-1": {
                "FGTVM64PAYG621": "ami-0f670719612ad57cc",
                "FGTVM64PAYG606": "ami-0e76e96a490a65635",
                "FGTVM64BYOL621": "ami-0e7e6465d4df6d255",
                "FGTVM64BYOL606": "ami-00d23bb3edbc94eb2"
            },
            "eu-north-1": {
                "FGTVM64PAYG621": "ami-34bf344a",
                "FGTVM64PAYG606": "Ami-d39318ad",
                "FGTVM64BYOL621": "ami-77bc3709",
                "FGTVM64BYOL606": "ami-d79d16a9"
            },
            "eu-west-1": {
                "FGTVM64PAYG621": "ami-0c14998b35a39578e",
                "FGTVM64PAYG606": "ami-0fade92f8a2d2e2b2",
                "FGTVM64BYOL621": "ami-0df5474a79001c6c2",
                "FGTVM64BYOL606": "ami-02d939f934f14f815"
            },
            "eu-west-2": {
                "FGTVM64PAYG621": "ami-08cce3d57081f5137",
                "FGTVM64PAYG606": "ami-0b1bed84cc40437e7",
                "FGTVM64BYOL621": "ami-00393f6e18472119a",
                "FGTVM64BYOL606": "ami-0650ca4c1ffcfabe8"
            },
            "eu-west-3": {
                "FGTVM64PAYG621": "ami-06dc0733eb79a0101",
                "FGTVM64PAYG606": "ami-013e274b6219a609c",
                "FGTVM64BYOL621": "ami-06f4dce9c3ae2c504",
                "FGTVM64BYOL606": "ami-0ab9f33a13902670f"
            },
            "sa-east-1": {
                "FGTVM64PAYG621": "ami-034495a12fdb747ce",
                "FGTVM64PAYG606": "ami-06d4b6df030dc5d92",
                "FGTVM64BYOL621": "ami-044322b7156fc185b",
                "FGTVM64BYOL606": "ami-0d280d4d847c3ba69"
            },
            "us-east-1": {
                "FGTVM64PAYG621": "ami-0face455a14251c57",
                "FGTVM64PAYG606": "ami-00cf45d0000a704da",
                "FGTVM64BYOL621": "ami-07118e58ea57bad8d",
                "FGTVM64BYOL606": "ami-05525803393084f99"
            },
            "us-east-2": {
                "FGTVM64PAYG621": "ami-07ca9dae55f42b1c3",
                "FGTVM64PAYG606": "ami-0ec45e3bafb8c9a71",
                "FGTVM64BYOL621": "ami-028fac923a06e4b98",
                "FGTVM64BYOL606": "ami-08609e3225a293e94"
            },
            "us-gov-west-1": {
                "FGTVM64PAYG621": "ami-6d00430c",
                "FGTVM64PAYG606": "ami-4ce1a02d",
                "FGTVM64BYOL621": "ami-2c2f6c4d",
                "FGTVM64BYOL606": "ami-54db9a35"
            },
            "us-west-1": {
                "FGTVM64PAYG621": "ami-0c106aaaac4c4abd8",
                "FGTVM64PAYG606": "ami-0454a9f438fdec4a6",
                "FGTVM64BYOL621": "ami-08aa9a2a137615c0e",
                "FGTVM64BYOL606": "ami-0ef24649a7322167a"
            },
            "us-west-2": {
                "FGTVM64PAYG621": "ami-0439b030915c59e67",
                "FGTVM64PAYG606": "ami-0ac0683ebd9c5d321",
                "FGTVM64BYOL621": "ami-0869ff94be017b4e5",
                "FGTVM64BYOL606": "ami-0b247d0dc0d7b1e9c"
            }
        },
        "ProtocolPortMap": {
            "HTTP": {
                "defaultport": "80"
            },
            "HTTPS": {
                "defaultport": "443"
            },
            "TCP": {
                "defaultport": "443"
            }
        }
    },
    "Resources": {
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "EnableSecondNic": "yes",
                    "EnableVmInfoCache": "no",
                    "EnableCustomLog": "yes",
                    "EnableTransitGatewayVpn": "no",
                    "EnableHybridLicensing": "yes",
                    "EnableFortiAnalyzer": "no"
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-db-table.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtInstanceIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": ["s3:GetObject"],
                                    "Resource": {
                                        "Fn::Sub": [
                                            "arn:aws:s3:::${S3BucketName}/${S3KeyPrefix}*",
                                            {
                                                "S3BucketName": {
                                                    "Ref": "S3BucketName"
                                                },
                                                "S3KeyPrefix": {
                                                    "Ref": "S3KeyPrefix"
                                                }
                                            }
                                        ]
                                    },
                                    "Effect": "Allow"
                                }
                            ]
                        },
                        "PolicyName": "fortigate-autoscale-instance-policy"
                    }
                ]
            }
        },
        "FgtInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "FgtInstanceIamRole"
                    }
                ]
            }
        },
        "StackCreateFortiGateAutoScaleHandler": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "VpcEndPoint": {
                        "Ref": "FgtAsgVpcEndpoint"
                    },
                    "HandlerScriptTimeout": 300,
                    "ServiceScriptTimeout": 900,
                    "CreateByolLicenseHandler": "yes"
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-autoscale-handler.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "fortigate-autoscale-security-group"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "FgtAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressTraffic": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "ToPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgVpcEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": [
                        "com.amazonaws.${region}.execute-api",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "FgtAsgSecurityGroup"
                    }
                ]
            }
        },
        "StackCreateNicAttachmentService": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "DbTableArn": {
                        "Fn::GetAtt": ["StackCreateDynamoDBTable", "Outputs.NicAttachmentTableArn"]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/add-nic-attachment-service.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StartNicAttachmentService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": ["StackCreateNicAttachmentService", "Outputs.CfnServiceProvider"]
                }
            }
        },
        "StackCreateLoadBalancingComponents": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "TrafficProtocol": {
                        "Ref": "LoadBalancingTrafficProtocol"
                    },
                    "TrafficPort": {
                        "Ref": "LoadBalancingTrafficPort"
                    },
                    "HealthCheckPort": {
                        "Ref": "FortiGateAdminPort"
                    },
                    "FgtTargetGroupHealthCheckThreshold": {
                        "Ref": "LoadBalancingHealthCheckThreshold"
                    },
                    "VpcId": {
                        "Ref": "VpcId"
                    },
                    "FgtSubnetIds": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "PublicSubnet1"
                                },
                                {
                                    "Ref": "PublicSubnet2"
                                }
                            ]
                        ]
                    },
                    "NewInternalLoadBalancer": {
                        "Fn::If": ["IfNewInternalLoadBalancer", "yes", "no"]
                    },
                    "InternalTargetGroupHealthCheckPath": {
                        "Ref": "InternalTargetGroupHealthCheckPath"
                    },
                    "InternalLoadBalancingSubnetIds": {
                        "Fn::Join": [
                            ",",
                            [
                                {
                                    "Ref": "PrivateSubnet1"
                                },
                                {
                                    "Ref": "PublicSubnet2"
                                }
                            ]
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-load-balancer.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StackCreateFortiGateAutoScalingGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "AsgSubnet1Id": {
                        "Ref": "PublicSubnet1"
                    },
                    "AsgSubnet2Id": {
                        "Ref": "PublicSubnet2"
                    },
                    "ELBV2TargetGroupARNs": "",
                    "InstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "InstanceProfileArn": {
                        "Fn::GetAtt": ["FgtInstanceProfile", "Arn"]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "SecurityGroupId": {
                        "Ref": "FgtAsgSecurityGroup"
                    },
                    "APIGatewayId": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.ApiGatewayId"
                        ]
                    },
                    "AsgHandlerFunctionName": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionName"
                        ]
                    },
                    "AsgHandlerFunctionArn": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionArn"
                        ]
                    },
                    "AsgHealthCheckGracePeriod": {
                        "Ref": "FgtAsgHealthCheckGracePeriod"
                    },
                    "AsgScaleInThreshold": {
                        "Ref": "FgtAsgScaleInThreshold"
                    },
                    "AsgScaleOutThreshold": {
                        "Ref": "FgtAsgScaleOutThreshold"
                    },
                    "AsgDesiredCapacityByol": 0,
                    "AsgMinSizeByol": 0,
                    "AsgMaxSizeByol": {
                        "Ref": "FgtAsgMaxSizeByol"
                    },
                    "AsgDesiredCapacityPayg": 0,
                    "AsgMinSizePayg": 0,
                    "AsgMaxSizePayg": {
                        "Ref": "FgtAsgMaxSizePayg"
                    },
                    "AsgCooldown": {
                        "Ref": "FgtAsgCooldown"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "ProductAMIByol": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersionByol",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "ProductCodeByol": "",
                    "ProductAMIPayg": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersionPayg",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "ProductCodePayg": ""
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-hybrid-auto-scaling-group.template",
                        {
                            "S3Region": {
                                "Fn::If": ["GovCloudCondition", "s3-us-gov-west-1", "s3"]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            },
            "DependsOn": ["StartNicAttachmentService"]
        },
        "StartFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "initiateAutoscale"
            },
            "DependsOn": ["StackCreateFortiGateAutoScalingGroup", "SaveSettings"]
        },
        "StopFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "stopAutoscale"
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler",
                "SaveSettings"
            ]
        },
        "SaveSettings": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "saveSettings",
                "DeploymentSettingsSaved": "true",
                "ResourceTagPrefix": {
                    "Ref": "ResourceTagPrefix"
                },
                "CustomIdentifier": {
                    "Ref": "CustomIdentifier"
                },
                "UniqueId": {
                    "Ref": "UniqueId"
                },
                "AssetStorageName": {
                    "Ref": "S3BucketName"
                },
                "AssetStorageKeyPrefix": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "S3KeyPrefix"
                            },
                            "assets"
                        ]
                    ]
                },
                "FortiGateAutoscaleVpcId": {
                    "Ref": "VpcId"
                },
                "FortiGateAutoscaleSubnet1": {
                    "Ref": "PublicSubnet1"
                },
                "FortiGateAutoscaleSubnet2": {
                    "Ref": "PublicSubnet2"
                },
                "FortiGateAutoscaleProtectedSubnet1": {
                    "Ref": "PrivateSubnet1"
                },
                "FortiGateAutoscaleProtectedSubnet2": {
                    "Ref": "PrivateSubnet2"
                },
                "FortiGatePskSecret": {
                    "Ref": "FortiGatePskSecret"
                },
                "FortiGateAdminPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "FortiGateSyncInterface": "port1",
                "LifecycleHookTimeout": {
                    "Ref": "LifecycleHookTimeout"
                },
                "MasterElectionTimeout": {
                    "Ref": "MasterElectionTimeout"
                },
                "MasterElectionNoWait": "true",
                "HeartBeatInterval": {
                    "Ref": "HeartBeatInterval"
                },
                "HeartBeatLossCount": {
                    "Ref": "HeartBeatLossCount"
                },
                "HeartBeatDelayAllowance": {
                    "Ref": "HeartBeatDelayAllowance"
                },
                "AutoscaleHandlerUrl": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerApiGatewayUrl"
                    ]
                },
                "MasterScalingGroupName": {
                    "Fn::If": [
                        "IfPAYGOnly",
                        {
                            "Fn::GetAtt": [
                                "StackCreateFortiGateAutoScalingGroup",
                                "Outputs.AutoScalingGroupNamePayg"
                            ]
                        },
                        {
                            "Fn::GetAtt": [
                                "StackCreateFortiGateAutoScalingGroup",
                                "Outputs.AutoScalingGroupNameByol"
                            ]
                        }
                    ]
                },
                "PAYGScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupNamePayg"
                    ]
                },
                "BYOLScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupNameByol"
                    ]
                },
                "ByolScalingGroupDesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacityByol"
                },
                "ByolScalingGroupMinSize": {
                    "Ref": "FgtAsgMinSizeByol"
                },
                "ByolScalingGroupMaxSize": {
                    "Ref": "FgtAsgMaxSizeByol"
                },
                "ScalingGroupDesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacityPayg"
                },
                "ScalingGroupMinSize": {
                    "Ref": "FgtAsgMinSizePayg"
                },
                "ScalingGroupMaxSize": {
                    "Ref": "FgtAsgMaxSizePayg"
                },
                "RequiredConfigset": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.RequiredConfigsetList"
                    ]
                },
                "RequiredDbTable": {
                    "Fn::GetAtt": ["StackCreateDynamoDBTable", "Outputs.TableNameList"]
                },
                "EnableTransitGatewayVpn": "false",
                "EnableSecondNic": "true",
                "EnableFortiGateElb": "true",
                "EnableInternalElb": {
                    "Fn::If": ["IfNewInternalLoadBalancer", "true", "false"]
                },
                "EnableHybridLicensing": "true",
                "FortiGateAutoscaleElbDns": {
                    "Fn::GetAtt": [
                        "StackCreateLoadBalancingComponents",
                        "Outputs.FgtLoadBalancerDnsName"
                    ]
                },
                "FortiGateAutoscaleTargetGroupArn": {
                    "Fn::GetAtt": [
                        "StackCreateLoadBalancingComponents",
                        "Outputs.FgtTargetGroupArn"
                    ]
                },
                "FortigateProtectedInternalElbDns": {
                    "Fn::If": [
                        "IfNewInternalLoadBalancer",
                        {
                            "Fn::GetAtt": [
                                "StackCreateLoadBalancingComponents",
                                "Outputs.InternalLoadBalancerDnsName"
                            ]
                        },
                        {
                            "Ref": "InternalLoadBalancerDnsName"
                        }
                    ]
                },
                "EnableDynamicNatGateway": "true",
                "DynamicNatGatewayRouteTables": {
                    "Fn::Join": [
                        ",",
                        [
                            {
                                "Ref": "PrivateSubnetRouteTable"
                            }
                        ]
                    ]
                },
                "EnableVmInfoCache": "false",
                "VmInfoCacheTime": 3600,
                "FortiGateLicenseStorageKeyPrefix": "fgt-asg-license",
                "FortiGateTrafficPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "GetLicenseGracePeriod": {
                    "Ref": "GetLicenseGracePeriod"
                }
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Resource tagging configuration"
                    },
                    "Parameters": ["ResourceTagPrefix", "CustomIdentifier", "UniqueId"]
                },
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "VpcCidr",
                        "VpcId",
                        "PublicSubnet1",
                        "PublicSubnet2",
                        "PrivateSubnet1",
                        "PrivateSubnet2",
                        "PrivateSubnetRouteTable"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate configuration"
                    },
                    "Parameters": [
                        "FortiGateInstanceType",
                        "FortiOSVersion",
                        "FortiGatePskSecret",
                        "FortiGateAdminPort",
                        "FortiGateAdminCidr",
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate auto scaling group configuration"
                    },
                    "Parameters": [
                        "FgtAsgDesiredCapacityByol",
                        "FgtAsgMinSizeByol",
                        "FgtAsgMaxSizeByol",
                        "FgtAsgDesiredCapacityPayg",
                        "FgtAsgMinSizePayg",
                        "FgtAsgMaxSizePayg",
                        "FgtAsgScaleOutThreshold",
                        "FgtAsgScaleInThreshold",
                        "MasterElectionTimeout",
                        "GetLicenseGracePeriod",
                        "FgtAsgHealthCheckGracePeriod",
                        "FgtAsgCooldown",
                        "LifecycleHookTimeout"
                    ]
                },
                {
                    "Label": {
                        "default": "Load balancing configuration"
                    },
                    "Parameters": [
                        "LoadBalancingTrafficProtocol",
                        "LoadBalancingTrafficPort",
                        "LoadBalancingHealthCheckThreshold",
                        "InternalLoadBalancingOptions",
                        "InternalTargetGroupHealthCheckPath",
                        "InternalLoadBalancerDnsName"
                    ]
                },
                {
                    "Label": {
                        "default": "Failover management configuration"
                    },
                    "Parameters": [
                        "HeartBeatInterval",
                        "HeartBeatLossCount",
                        "HeartBeatDelayAllowance"
                    ]
                },
                {
                    "Label": {
                        "default": "Deployment resources configuration"
                    },
                    "Parameters": ["S3BucketName", "S3KeyPrefix"]
                }
            ],
            "ParameterLabels": {
                "S3BucketName": {
                    "default": "S3 bucket name"
                },
                "S3KeyPrefix": {
                    "default": "S3 resource folder"
                },
                "ResourceTagPrefix": {
                    "default": "Resource tag prefix"
                },
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "UniqueId": {
                    "default": "Unique ID"
                },
                "VpcCidr": {
                    "default": "VPC CIDR"
                },
                "PublicSubnet1": {
                    "default": "Autoscale subnet 1 Id"
                },
                "PublicSubnet2": {
                    "default": "Autoscale subnet 2 Id"
                },
                "PrivateSubnet1": {
                    "default": "Private subnet 1 Id"
                },
                "PrivateSubnet2": {
                    "default": "Private subnet 2 Id"
                },
                "PrivateSubnetRouteTable": {
                    "default": "Private subnet route table"
                },
                "FortiGateInstanceType": {
                    "default": "Instance type"
                },
                "FortiOSVersion": {
                    "default": "FortiOS version"
                },
                "LifecycleHookTimeout": {
                    "default": "Instance lifecycle timeout"
                },
                "FgtAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FgtAsgDesiredCapacityByol": {
                    "default": "Desired capacity (BYOL)"
                },
                "FgtAsgMinSizeByol": {
                    "default": "Minimum group size (BYOL)"
                },
                "FgtAsgMaxSizeByol": {
                    "default": "Maximum group size (BYOL)"
                },
                "FgtAsgDesiredCapacityPayg": {
                    "default": "Desired capacity (PAYG)"
                },
                "FgtAsgMinSizePayg": {
                    "default": "Minimum group size (PAYG)"
                },
                "FgtAsgMaxSizePayg": {
                    "default": "Maximum group size (PAYG)"
                },
                "FgtAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FgtAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FgtAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiGateAdminPort": {
                    "default": "Admin port"
                },
                "FortiGateAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "FortiGatePskSecret": {
                    "default": "FortiGate PSK secret"
                },
                "MasterElectionTimeout": {
                    "default": "Master election timeout"
                },
                "HeartBeatInterval": {
                    "default": "Heart beat interval"
                },
                "HeartBeatLossCount": {
                    "default": "Heart beat loss count"
                },
                "HeartBeatDelayAllowance": {
                    "default": "Heart beat delay allowance"
                },
                "LoadBalancingTrafficProtocol": {
                    "default": "Traffic protocol"
                },
                "LoadBalancingTrafficPort": {
                    "default": "Traffic port"
                },
                "LoadBalancingHealthCheckThreshold": {
                    "default": "Health check threshold"
                },
                "InternalLoadBalancingOptions": {
                    "default": "Internal ELB options"
                },
                "InternalTargetGroupHealthCheckPath": {
                    "default": "Health check path"
                },
                "InternalLoadBalancerDnsName": {
                    "default": "Internal ELB DNS name"
                },
                "GetLicenseGracePeriod": {
                    "default": "Get license grace period"
                }
            }
        }
    },
    "Outputs": {
        "FgtLicensingModel": {
            "Description": "The FortiGate licensing model in the Auto Scaling group(s) for the initial deployment of this stack. (Options: PAYG-Only, BYOL-Only, Hybrid)",
            "Value": {
                "Fn::If": [
                    "IfPAYGOnly",
                    "PAYG-Only",
                    {
                        "Fn::If": [
                            "IfBYOLOnly",
                            "BYOL-Only",
                            "Hybrid"
                        ]
                    }
                ]
            }
        }
    }
}
