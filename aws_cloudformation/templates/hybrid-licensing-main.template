{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiGate Autoscale Solution (with Hybrid Licensing model)[in an existing VPC]. This template deploys the FortiGate Autoscale and related components into an existing VPC. Please see the FortiGate Autoscale documentation for more details. **WARNING** You will be billed for the FortiGate On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "S3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Deployment related resource bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the FortiGate Autoscale deployment related resource. This bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "S3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Deployment related resource key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the deployment related resource. This key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
        },
        "ResourceTagPrefix": {
            "Type": "String",
            "AllowedPattern": "[0-9a-zA-Z@.#-]+",
            "MaxLength": 64,
            "ConstraintDescription": "Resource tag prefix can include numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64.",
            "Description": "A prefix for tag key ResourceGroup on all resources. It's also used as the name prefix of all applicable resources. Can only contain numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "A short custom identifier as resource name prefix. This shorter version of name prefix is used on a resource that Resource tag prefix cannot apply to. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers. Max length is 10."
        },
        "UniqueId": {
            "Type": "String",
            "MaxLength": "8",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and digits",
            "Description": "A random string as a unique ID for all resources in this deployment stack and nested stacks. Max length is 8."
        },
        "VpcCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the FortiGate Autoscale VPC."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "The existing VPC IDs where you deploy the Auto-Scaling group and related resources. The VPC must have the option 'DNS hostnames' enabled."
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public (DMZ) subnet 1, which is located in Availability Zone 1."
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Public (DMZ) subnet 2, which is located in Availability Zone 2."
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Private subnet, which is located in Availability Zone 1."
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Private subnet, which is located in Availability Zone 2."
        },
        "PrivateSubnetRouteTable": {
            "Type": "String",
            "Description": "Route table ID associated with the private subnets."
        },
        "FortiGateInstanceType": {
            "Type": "String",
            "Description": "Instance type to launch as FortiGate On-Demand instances. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/"
        },
        "FortiOSVersion": {
            "Type": "String",
            "Default": "LATEST",
            "Description": "Supported FortiOS versions."
        },
        "LifecycleHookTimeout": {
            "Type": "Number",
            "Default": 400,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The amount of time (in seconds) that can elapse before the FortiGate Autoscale lifecycle hook times out. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Auto Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgDesiredCapacityByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "The number of FortiGate instances the BYOL auto-scaling should have at any time, also called desired capacity. Must keep at least 2 FortiGates in the group for High Availability. Minimum is 2."
        },
        "FgtAsgMinSizeByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Minimum number of FortiGate instances in the BYOL auto-scaling. Minimum is 2."
        },
        "FgtAsgMaxSizeByol": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Maximum number of FortiGate instances in the BYOL auto-scaling. Minimum is 2."
        },
        "FgtAsgDesiredCapacityPayg": {
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "The number of FortiGate instances the PAYG auto-scaling should have at any time, also called desired capacity."
        },
        "FgtAsgMinSizePayg": {
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Minimum number of FortiGate instances in the PAYG auto-scaling."
        },
        "FgtAsgMaxSizePayg": {
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "ConstraintDescription": "must be a valid number not less than 0.",
            "Description": "Maximum number of FortiGate instances in the PAYG auto-scaling."
        },
        "FgtAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FgtAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FgtAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "MaxLength": "128",
            "Description": "A secret key for the FortiGate instances to securely communicate with each other. It can be of your choice of a string, such as numbers or letters or the combination of them. Max length 128."
        },
        "FortiGateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Minimum is 1. Maximum is 65535. Do not use: 443, 541, 514, 703 because these are FortiGate reserved ports."
        },
        "FortiGateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is highly not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must specify an admin access key pair for FortiGate instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "MasterElectionTimeout": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 90,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 90 and 3600.",
            "Description": "The amount of time (in seconds) for FortiGate master election to timeout. Minimum is 30. Maximum is 3600."
        },
        "HeartBeatInterval": {
            "Type": "Number",
            "Default": 30,
            "MinValue": 30,
            "MaxValue": 90,
            "ConstraintDescription": "must be a valid number between 30 and 90.",
            "Description": "The amount of time (in seconds) for FortiGate to send a heartbeat to the Autoscale handler. Minimum is 30. Maximum is 90."
        },
        "HeartBeatLossCount": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid number between 1 and 65535.",
            "Description": "Number of consecutively lost heartbeats. When the Heartbeat Loss Count has been reached, the VM is deemed unhealthy and fail-over activities will commence."
        },
        "HeartBeatDelayAllowance": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 0,
            "Description": "The maximum amount of time (in seconds) for network latency acceptable in FortiGate heartbeat arriving at the Autoscale handler. Minimum is 0."
        },
        "LoadBalancingTrafficProtocol": {
            "Type": "String",
            "Default": "HTTPS",
            "AllowedValues": [
                "HTTP",
                "HTTPS",
                "TCP"
            ],
            "ConstraintDescription": "value must be chosen from the provided options.",
            "Description": "Use this protocol to load balance traffic."
        },
        "LoadBalancingTrafficPort": {
            "Type": "Number",
            "Default": 443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Balance web service traffic over this port if the internal web-service load balancer is enabled. Minimum is 1. Maximum is 65535."
        },
        "LoadBalancingHealthCheckThreshold": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "ConstraintDescription": "must be a valid number not less than 3.",
            "Description": "The number of consecutive health check failures required before considering a FortiGate instance unhealthy. Minimum is 3."
        },
        "InternalLoadBalancingOptions": {
            "Type": "String",
            "Default": "add a new internal load balancer",
            "AllowedValues": [
                "add a new internal load balancer",
                "use a load balancer specified below",
                "do not need one"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Add an optional pre-defined load balancer to route traffic to web service in the private subnets. You can optionally use your own one or decide to not need one."
        },
        "InternalTargetGroupHealthCheckPath": {
            "Type": "String",
            "Default": "/",
            "AllowedPattern": "^/[0-9a-zA-Z-/]*$",
            "MaxLength": 1024,
            "ConstraintDescription": "This path must begin with a '/' character, and can be at most 1024 characters in length.",
            "Description": "Optional. The destination path for health checks. This path must begin with a '/' character, and can be at most 1024 characters in length."
        },
        "InternalLoadBalancerDnsName": {
            "Type": "String",
            "Description": "Optional. Specify the DNS Name of an existing internal load balancer used to route traffic from FortiGate to targets in a specified target group. Leave it blank if you don't use an existing load balancer."
        },
        "GetLicenseGracePeriod": {
            "Type": "Number",
            "Default": 600,
            "MinValue": 300,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The minimum time (in seconds) between a license is distributed and recycled to re-distribute. Minimum is 300."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [{
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "IfNewInternalLoadBalancer": {
            "Fn::Equals": [{
                    "Ref": "InternalLoadBalancingOptions"
                },
                "add a new internal load balancer"
            ]
        }
    },
    "Mappings": {
        "FortiGateKeyMap": {
            "FortiGateVersion": {
                "LATEST": "FGTVM64PAYG605",
                "603": "FGTVM64PAYG603",
                "604": "FGTVM64PAYG604",
                "605": "FGTVM64PAYG605"
            },
            "FortiGateVersionByol": {
                "LATEST": "FGTVM64BYOL605",
                "603": "FGTVM64BYOL603",
                "604": "FGTVM64BYOL604",
                "605": "FGTVM64BYOL605"
            }
        },
        "AWSAMIRegionMap": {
            "AMI": {
                "FGTVM64PAYG603": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0200 (6.0.3) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-09dba22e5db2d4fb5.4",
                "FGTVM64PAYG604": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0231 (6.0.4) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-03aa5daa2a028ceba.4",
                "FGTVM64BYOL603": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0200 (6.0.3) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-09dba22e5db2d4fb5.4",
                "FGTVM64BYOL604": "aws-marketplace/FortiGate-VM64-AWSONDEMAND build0231 (6.0.4) GA-3124a694-441c-4ff1-8bf7-4d153be424a6-ami-03aa5daa2a028ceba.4",
                "FGTVM64BYOL605": "aws-marketplace/FortiGate-VM64-AWS build0268 (6.0.5) GA-e5936f4a-0d69-479f-919c-d5e158bd4d12-ami-01a04a943880c83ec.4"
            },
            "ap-northeast-1": {
                "FGTVM64PAYG603": "ami-0bd9e6e0020928ef9"
            },
            "ap-northeast-2": {
                "FGTVM64PAYG603": "ami-0a560b6c089c6310a"
            },
            "ap-southeast-1": {
                "FGTVM64PAYG603": "ami-000c0166f49864e4a"
            },
            "ap-southeast-2": {
                "FGTVM64PAYG603": "ami-0e3662b3f822e3be4"
            },
            "ap-south-1": {
                "FGTVM64PAYG603": "ami-0c5a28e0b56028d6d"
            },
            "sa-east-1": {
                "FGTVM64PAYG603": "ami-0424ffd602f0af643"
            },
            "eu-west-1": {
                "FGTVM64PAYG603": "ami-0aeda1bdca1b205bd"
            },
            "eu-west-2": {
                "FGTVM64PAYG603": "ami-0de7050ef166ab900"
            },
            "eu-west-3": {
                "FGTVM64PAYG603": "ami-0ce86abfa74c76ad2"
            },
            "eu-central-1": {
                "FGTVM64PAYG603": "ami-0af055c02be246473"
            },
            "ca-central-1": {
                "FGTVM64PAYG603": "ami-0583f62d15a462f5c"
            },
            "us-east-1": {
                "FGTVM64PAYG603": "ami-09e4f25ec992c94ab"
            },
            "us-east-2": {
                "FGTVM64PAYG605": "ami-07c2582e55a222dd3",
                "FGTVM64BYOL605": "ami-06c0b5327ae077f9b"
            },
            "us-west-1": {
                "FGTVM64PAYG603": "ami-057300bd7e60ea2b2",
                "FGTVM64BYOL604": "ami-057300bd7e60ea2b2"
            },
            "us-west-2": {
                "FGTVM64PAYG603": "ami-0ea3f14da73832fdc",
                "FGTVM64BYOL603": "ami-0ea3f14da73832fdc"
            },
            "us-gov-west-1": {
                "FGTVM64PAYG603": "ami-ddf76dbc"
            }
        },
        "ProtocolPortMap": {
            "HTTP": {
                "defaultport": "80"
            },
            "HTTPS": {
                "defaultport": "443"
            },
            "TCP": {
                "defaultport": "443"
            }
        }
    },
    "Resources": {
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "EnableSecondNic": "yes",
                    "EnableVmInfoCache": "no",
                    "EnableCustomLog": "yes",
                    "EnableTransitGatewayVpn": "no",
                    "EnableHybridLicensing": "yes",
                    "EnableFortiAnalyzer": "no"
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-db-table.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtInstanceIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:aws:s3:::${S3BucketName}/${S3KeyPrefix}*",
                                    {
                                        "S3BucketName": {
                                            "Ref": "S3BucketName"
                                        },
                                        "S3KeyPrefix": {
                                            "Ref": "S3KeyPrefix"
                                        }
                                    }
                                ]
                            },
                            "Effect": "Allow"
                        }]
                    },
                    "PolicyName": "fortigate-autoscale-instance-policy"
                }]
            }
        },
        "FgtInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "FgtInstanceIamRole"
                }]
            }
        },
        "StackCreateFortiGateAutoScaleHandler": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "VpcEndPoint": {
                        "Ref": "FgtAsgVpcEndpoint"
                    },
                    "HandlerScriptTimeout": 300,
                    "ServiceScriptTimeout": 900,
                    "VpcId": {
                        "Ref": "VpcId"
                    },
                    "FortiGatePskSecret": {
                        "Ref": "FortiGatePskSecret"
                    },
                    "FortiGateAdminPort": {
                        "Ref": "FortiGateAdminPort"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "HeartBeatInterval": {
                        "Ref": "HeartBeatInterval"
                    },
                    "HeartBeatLossCount": {
                        "Ref": "HeartBeatLossCount"
                    },
                    "CreateByolLicenseHandler": "yes"
            },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-autoscale-handler.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [{
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "fortigate-autoscale-security-group"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "FgtAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressTraffic": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "ToPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgVpcEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SubnetIds": [{
                        "Ref": "PublicSubnet1"
                    },
                    {
                        "Ref": "PublicSubnet2"
                    }
                ],
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": [
                        "com.amazonaws.${region}.execute-api",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "SecurityGroupIds": [{
                    "Ref": "FgtAsgSecurityGroup"
                }]
            }
        },
        "StackCreateNicAttachmentService": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "DbTableArn": {
                        "Fn::GetAtt": [
                            "StackCreateDynamoDBTable",
                            "Outputs.NicAttachmentTableArn"
                        ]
                    },
                    "VpcId": {
                        "Ref": "VpcId"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/add-nic-attachment-service.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StartNicAttachmentService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateNicAttachmentService",
                        "Outputs.CfnServiceProvider"
                    ]
                }
            }
        },
        "StackCreateLoadBalancingComponents": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "TrafficProtocol": {
                        "Ref": "LoadBalancingTrafficProtocol"
                    },
                    "TrafficPort": {
                        "Ref": "LoadBalancingTrafficPort"
                    },
                    "HealthCheckPort": {
                        "Ref": "FortiGateAdminPort"
                    },
                    "FgtTargetGroupHealthCheckThreshold": {
                        "Ref": "LoadBalancingHealthCheckThreshold"
                    },
                    "VpcId": {
                        "Ref": "VpcId"
                    },
                    "FgtSubnetIds": {
                        "Fn::Join": [
                            ",",
                            [{
                                    "Ref": "PublicSubnet1"
                                },
                                {
                                    "Ref": "PublicSubnet2"
                                }
                            ]
                        ]
                    },
                    "NewInternalLoadBalancer": {
                        "Fn::If": [
                            "IfNewInternalLoadBalancer",
                            "yes",
                            "no"
                        ]
                    },
                    "InternalTargetGroupHealthCheckPath": {
                        "Ref": "InternalTargetGroupHealthCheckPath"
                    },
                    "InternalLoadBalancingSubnetIds": {
                        "Fn::Join": [
                            ",",
                            [{
                                    "Ref": "PrivateSubnet1"
                                },
                                {
                                    "Ref": "PublicSubnet2"
                                }
                            ]
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-load-balancer.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StackCreateFortiGateAutoScalingGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "S3BucketName": {
                        "Ref": "S3BucketName"
                    },
                    "S3KeyPrefix": {
                        "Ref": "S3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "AsgSubnet1Id": {
                        "Ref": "PublicSubnet1"
                    },
                    "AsgSubnet2Id": {
                        "Ref": "PublicSubnet2"
                    },
                    "ELBV2TargetGroupARNs": "",
                    "InstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "InstanceProfileArn": {
                        "Fn::GetAtt": [
                            "FgtInstanceProfile",
                            "Arn"
                        ]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "SecurityGroupId": {
                        "Ref": "FgtAsgSecurityGroup"
                    },
                    "APIGatewayId": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.ApiGatewayId"
                        ]
                    },
                    "AsgHandlerFunctionName": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionName"
                        ]
                    },
                    "AsgHandlerFunctionArn": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionArn"
                        ]
                    },
                    "AsgHealthCheckGracePeriod": {
                        "Ref": "FgtAsgHealthCheckGracePeriod"
                    },
                    "AsgScaleInThreshold": {
                        "Ref": "FgtAsgScaleInThreshold"
                    },
                    "AsgScaleOutThreshold": {
                        "Ref": "FgtAsgScaleOutThreshold"
                    },
                    "AsgDesiredCapacityByol": 0,
                    "AsgMinSizeByol": 0,
                    "AsgMaxSizeByol": {
                        "Ref": "FgtAsgMaxSizeByol"
                    },
                    "AsgDesiredCapacityPayg": 0,
                    "AsgMinSizePayg": 0,
                    "AsgMaxSizePayg": {
                        "Ref": "FgtAsgMaxSizePayg"
                    },
                    "AsgCooldown": {
                        "Ref": "FgtAsgCooldown"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "ProductAMIByol": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersionByol",
                                    {
                                        "Ref": "FortiOSVersion"
                                    }
                                ]
                            }
                        ]
                    },
                    "ProductCodeByol": "",
                    "ProductAMIPayg": {
                        "Fn::FindInMap": [
                            "AWSAMIRegionMap",
                            {
                                "Ref": "AWS::Region"
                            },
                            {
                                "Fn::FindInMap": [
                                    "FortiGateKeyMap",
                                    "FortiGateVersion",
                                    "LATEST"
                                ]
                            }
                        ]
                    },
                    "ProductCodePayg": ""
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${S3BucketName}.${S3Region}.amazonaws.com/${S3KeyPrefix}templates/create-hybrid-auto-scaling-group.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "S3BucketName": {
                                "Ref": "S3BucketName"
                            },
                            "S3KeyPrefix": {
                                "Ref": "S3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            },
            "DependsOn": [
                "StartNicAttachmentService"
            ]
        },
        "StartFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "initiateAutoscale"
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "SaveSettings"
            ]
        },
        "StopFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "stopAutoscale"
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler",
                "SaveSettings"
            ]
        },
        "SaveSettings": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "saveSettings",
                "DeploymentSettingsSaved": "true",
                "ResourceTagPrefix": {
                    "Ref": "ResourceTagPrefix"
                },
                "CustomIdentifier": {
                    "Ref": "CustomIdentifier"
                },
                "UniqueId": {
                    "Ref": "UniqueId"
                },
                "AssetStorageName": {
                    "Ref": "S3BucketName"
                },
                "AssetStorageKeyPrefix": {
                    "Fn::Join": [
                        "",
                        [{
                            "Ref": "S3KeyPrefix"
                        },
                        "assets"]
                    ]
                },
                "FortiGateAutoscaleVpcId": {
                    "Ref": "VpcId"
                },
                "FortiGateAutoscaleSubnet1": {
                    "Ref": "PublicSubnet1"
                },
                "FortiGateAutoscaleSubnet2": {
                    "Ref": "PublicSubnet2"
                },
                "FortiGateAutoscaleProtectedSubnet1": {
                    "Ref": "PrivateSubnet1"
                },
                "FortiGateAutoscaleProtectedSubnet2": {
                    "Ref": "PrivateSubnet2"
                },
                "FortiGatePskSecret": {
                    "Ref": "FortiGatePskSecret"
                },
                "FortiGateAdminPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "FortiGateSyncInterface": "port1",
                "LifecycleHookTimeout": {
                    "Ref": "LifecycleHookTimeout"
                },
                "MasterElectionTimeout": {
                    "Ref": "MasterElectionTimeout"
                },
                "MasterElectionNoWait": "true",
                "HeartBeatInterval": {
                    "Ref": "HeartBeatInterval"
                },
                "HeartBeatLossCount": {
                    "Ref": "HeartBeatLossCount"
                },
                "HeartBeatDelayAllowance": {
                    "Ref": "HeartBeatDelayAllowance"
                },
                "AutoscaleHandlerUrl": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerApiGatewayUrl"
                    ]
                },
                "MasterScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupNameByol"
                    ]
                },
                "PAYGScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupNamePayg"
                    ]
                },
                "BYOLScalingGroupName": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScalingGroup",
                        "Outputs.AutoScalingGroupNameByol"
                    ]
                },
                "ByolScalingGroupDesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacityByol"
                },
                "ByolScalingGroupMinSize": {
                    "Ref": "FgtAsgMinSizeByol"
                },
                "ByolScalingGroupMaxSize": {
                    "Ref": "FgtAsgMaxSizeByol"
                },
                "ScalingGroupDesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacityPayg"
                },
                "ScalingGroupMinSize": {
                    "Ref": "FgtAsgMinSizePayg"
                },
                "ScalingGroupMaxSize": {
                    "Ref": "FgtAsgMaxSizePayg"
                },
                "RequiredConfigset": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.RequiredConfigsetList"
                    ]
                },
                "RequiredDbTable": {
                    "Fn::GetAtt": [
                        "StackCreateDynamoDBTable",
                        "Outputs.TableNameList"
                    ]
                },
                "EnableTransitGatewayVpn": "false",
                "EnableSecondNic": "true",
                "EnableFortiGateElb": "true",
                "EnableInternalElb": {
                    "Fn::If": [
                        "IfNewInternalLoadBalancer",
                        "true",
                        "false"
                    ]
                },
                "EnableHybridLicensing": "true",
                "FortiGateAutoscaleElbDns": {
                    "Fn::GetAtt": [
                        "StackCreateLoadBalancingComponents",
                        "Outputs.FgtLoadBalancerDnsName"
                    ]
                },
                "FortiGateAutoscaleTargetGroupArn": {
                    "Fn::GetAtt": [
                        "StackCreateLoadBalancingComponents",
                        "Outputs.FgtTargetGroupArn"
                    ]
                },
                "FortigateProtectedInternalElbDns": {
                    "Fn::If": [
                        "IfNewInternalLoadBalancer",
                        {
                            "Fn::GetAtt": [
                                "StackCreateLoadBalancingComponents",
                                "Outputs.InternalLoadBalancerDnsName"
                            ]
                        },
                        {
                            "Ref": "InternalLoadBalancerDnsName"
                        }
                    ]
                },
                "EnableDynamicNatGateway": "true",
                "DynamicNatGatewayRouteTables": {
                    "Fn::Join": [
                        ",",
                        [{
                            "Ref": "PrivateSubnetRouteTable"
                        }]
                    ]
                },
                "EnableVmInfoCache": "false",
                "VmInfoCacheTime": 3600,
                "FortiGateLicenseStorageKeyPrefix": "fgt-asg-license",
                "FortiGateTrafficPort": {
                    "Ref": "LoadBalancingTrafficPort"
                },
                "GetLicenseGracePeriod": {
                    "Ref": "GetLicenseGracePeriod"
                }
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup",
                "StackCreateFortiGateAutoScaleHandler"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Resource tagging configuration"
                    },
                    "Parameters": [
                        "ResourceTagPrefix",
                        "CustomIdentifier",
                        "UniqueId"
                    ]
                },
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VpcCidr",
                        "VpcId",
                        "PublicSubnet1",
                        "PublicSubnet2",
                        "PrivateSubnet1",
                        "PrivateSubnet2",
                        "PrivateSubnetRouteTable"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate configuration"
                    },
                    "Parameters": [
                        "FortiGateInstanceType",
                        "FortiOSVersion",
                        "FortiGatePskSecret",
                        "FortiGateAdminPort",
                        "FortiGateAdminCidr",
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate auto scaling group configuration"
                    },
                    "Parameters": [
                        "FgtAsgDesiredCapacityByol",
                        "FgtAsgMinSizeByol",
                        "FgtAsgMaxSizeByol",
                        "FgtAsgDesiredCapacityPayg",
                        "FgtAsgMinSizePayg",
                        "FgtAsgMaxSizePayg",
                        "FgtAsgScaleOutThreshold",
                        "FgtAsgScaleInThreshold",
                        "MasterElectionTimeout",
                        "GetLicenseGracePeriod",
                        "FgtAsgHealthCheckGracePeriod",
                        "FgtAsgCooldown",
                        "LifecycleHookTimeout"
                    ]
                },
                {
                    "Label": {
                        "default": "Load balancing configuration"
                    },
                    "Parameters": [
                        "LoadBalancingTrafficProtocol",
                        "LoadBalancingTrafficPort",
                        "LoadBalancingHealthCheckThreshold",
                        "InternalLoadBalancingOptions",
                        "InternalTargetGroupHealthCheckPath",
                        "InternalLoadBalancerDnsName"
                    ]
                },
                {
                    "Label": {
                        "default": "Failover management configuration"
                    },
                    "Parameters": [
                        "HeartBeatInterval",
                        "HeartBeatLossCount",
                        "HeartBeatDelayAllowance"
                    ]
                },
                {
                    "Label": {
                        "default": "Deployment resources configuration"
                    },
                    "Parameters": [
                        "S3BucketName",
                        "S3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "S3BucketName": {
                    "default": "S3 bucket name"
                },
                "S3KeyPrefix": {
                    "default": "S3 key prefix"
                },
                "ResourceTagPrefix": {
                    "default": "Resource tag prefix"
                },
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "UniqueId": {
                    "default": "Unique ID"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VpcCidr": {
                    "default": "VPC CIDR"
                },
                "VpcId": {
                    "default": "VPC ID"
                },
                "PublicSubnet1": {
                    "default": "Autoscale subnet 1 Id"
                },
                "PublicSubnet2": {
                    "default": "Autoscale subnet 2 Id"
                },
                "PrivateSubnet1": {
                    "default": "Private subnet 1 Id"
                },
                "PrivateSubnet2": {
                    "default": "Private subnet 2 Id"
                },
                "PrivateSubnetRouteTable": {
                    "default": "Private subnet route table"
                },
                "FortiGateInstanceType": {
                    "default": "Instance type"
                },
                "FortiOSVersion": {
                    "default": "FortiOS version"
                },
                "LifecycleHookTimeout": {
                    "default": "Instance lifecycle timeout"
                },
                "FgtAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FgtAsgDesiredCapacityByol": {
                    "default": "Desired capacity (BYOL)"
                },
                "FgtAsgMinSizeByol": {
                    "default": "Minimum group size (BYOL)"
                },
                "FgtAsgMaxSizeByol": {
                    "default": "Maximum group size (BYOL)"
                },
                "FgtAsgDesiredCapacityPayg": {
                    "default": "Desired capacity (PAYG)"
                },
                "FgtAsgMinSizePayg": {
                    "default": "Minimum group size (PAYG)"
                },
                "FgtAsgMaxSizePayg": {
                    "default": "Maximum group size (PAYG)"
                },
                "FgtAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FgtAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FgtAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiGateAdminPort": {
                    "default": "Admin port"
                },
                "FortiGateAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "FortiGatePskSecret": {
                    "default": "FortiGate PSK secret"
                },
                "MasterElectionTimeout": {
                    "default": "Master election timeout"
                },
                "HeartBeatInterval": {
                    "default": "Heart beat interval"
                },
                "HeartBeatLossCount": {
                    "default": "Heart beat loss count"
                },
                "HeartBeatDelayAllowance": {
                    "default": "Heart beat delay allowance"
                },
                "LoadBalancingTrafficProtocol": {
                    "default": "Traffic protocol"
                },
                "LoadBalancingTrafficPort": {
                    "default": "Traffic port"
                },
                "LoadBalancingHealthCheckThreshold": {
                    "default": "Health Check Threshold"
                },
                "InternalLoadBalancingOptions": {
                    "default": "Internal ELB options"
                },
                "InternalTargetGroupHealthCheckPath": {
                    "default": "Health check path"
                },
                "InternalLoadBalancerDnsName": {
                    "default": "Internal ELB DNS name"
                },
                "GetLicenseGracePeriod": {
                    "default": "Get license grace period"
                }
            }
        }
    },
    "Outputs": {}
}
