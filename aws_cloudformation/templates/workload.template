{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiGate Autoscale Solution (with Transit Gateway integration). This template deploys Fortinet FortiGate cluster integrated with Transit Gateway. Please see the documentation for more details. **WARNING** You will be billed for the FortiGate On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "ResourceTagPrefix": {
            "Type": "String",
            "AllowedPattern": "[0-9a-zA-Z@.#-]+",
            "MaxLength": 64,
            "ConstraintDescription": "Resource tag prefix can include numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64.",
            "Description": "A prefix for tag key ResourceGroup on all resources. It's also used as the name prefix of all applicable resources. Can only contain numbers, lowercase letters, uppercase letters, ampersat(@) , hyphens (-), period (.), and hash (#). Max length is 64."
        },
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "A short custom identifier as resource name prefix. This shorter version of name prefix is used on a resource that Resource tag prefix cannot apply to. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers. Max length is 10."
        },
        "UniqueId": {
            "Type": "String",
            "MaxLength": "8",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and digits",
            "Description": "A random text suffix for the DynamoDB table name which can help ensure the DB table name is unique per region. Can only contain uppercase, lowercase letters, and digits. Max length is 8."
        },
        "DeploymentPackageS3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Deployment related resource bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the FortiGate Autoscale deployment related resource. This bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "DeploymentPackageS3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Deployment related resource key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the deployment related resource. This key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
        },
        "AvailabilityZones": {
            "Description": "The list of Availability Zones to use for the subnets in the VPC. The FortiGate Autoscale solution uses two Availability Zones from your list and preserves the logical order you specify.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "VpcCidr": {
            "Type": "String",
            "Default": "192.168.127.0/23",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the FortiGate Autoscale VPC."
        },
        "PublicSubnet1Cidr": {
            "Type": "String",
            "Default": "192.168.127.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the subnet located in Availability Zone 1 where the FortiGate Autoscale instances will be deployed to."
        },
        "PublicSubnet2Cidr": {
            "Type": "String",
            "Default": "192.168.128.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the subnet located in Availability Zone 2 where the FortiGate Autoscale instances will be deployed to."
        },
        "FortiGateInstanceType": {
            "Type": "String",
            "Default": "c5.large",
            "AllowedValues": [
                "t2.small",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "Instance type to launch as FortiGate On-Demand instances. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/"
        },
        "LifecycleHookTimeout": {
            "Type": "Number",
            "Default": 400,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "The amount of time (in seconds) that can elapse before the FortiGate Autoscale lifecycle hook times out. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Auto Scaling group waits for the cooldown period (in seconds) to complete before resuming scaling activities. Minimum is 60. Maximum is 3600."
        },
        "FgtAsgDesiredCapacity": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "The number of FortiGate instances the group should have at any time, also called desired capacity. Must keep at least 2 FortiGates in the group for High Availability. Minimum is 2."
        },
        "FgtAsgMinSize": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Minimum number of FortiGate instances in the Auto-Scaling Group. Minimum is 2."
        },
        "FgtAsgMaxSize": {
            "Type": "Number",
            "Default": 4,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Maximum number of FortiGate instances in the Auto-Scaling Group. Minimum is 2."
        },
        "FgtAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "The length of time (in seconds) that Auto Scaling waits before checking an instance's health status. Minimum is 60."
        },
        "FgtAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-in (remove) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FgtAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "The threshold (in percentage) for the FortiGate Auto Scaling group to scale-out (add) 1 instance. Minimum is 1. Maximum is 100."
        },
        "FortiGatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "MaxLength": "128",
            "Description": "A secret key for the FortiGate instances to securely communicate with each other. It can be of your choice of a string, such as numbers or letters or the combination of them. Max length 128."
        },
        "FortiGateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Minimum is 1. Maximum is 65535. Do not use: 443, 541, 514, 703 because these are FortiGate reserved ports."
        },
        "FortiGateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is highly not recommended.",
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
        },
        "KeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must specify an admin access key pair for FortiGate instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        },
        "HeartBeatLossCount": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid number between 1 and 65535.",
            "Description": "Number of consecutively lost heartbeats. When the Heartbeat Loss Count has been reached, the VM is deemed unhealthy and fail-over activities will commence."
        },
        "TransitGatewaySupportOptions": {
            "Type": "String",
            "Default": "create one",
            "AllowedValues": [
                "create one",
                "use an existing one"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Options for add an optional pre-defined load balancer to route traffic to web service in the private subnets. You can optionally use your own one or decide to not need one."
        },
        "TransitGatewayId": {
            "Type": "String",
            "Description": "If you use an existing Transit Gateway, specify the ID of the Transit Gateway that the FortiGate Autoscale VPC is attached to."
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [{
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "CreateTransitGateway": {
            "Fn::Equals": [{
                    "Ref": "TransitGatewaySupportOptions"
                },
                "create one"
            ]
        }
    },
    "Resources": {
        "StackCreateNewTransitGateway": {
            "Type": "AWS::CloudFormation::Stack",
            "Condition": "CreateTransitGateway",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/create-transit-gateway.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "5"
            }
        },
        "StackCreateNewVPC": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "VpcCidr": {
                        "Ref": "VpcCidr"
                    },
                    "PublicSubnet1Cidr": {
                        "Ref": "PublicSubnet1Cidr"
                    },
                    "PublicSubnet2Cidr": {
                        "Ref": "PublicSubnet2Cidr"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/create-new-vpc.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "5"
            }
        },
        "StackCreateDynamoDBTable": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/create-db-table.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtInstanceIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSLambdaExecute"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": {
                                "Fn::Sub": [
                                    "arn:aws:s3:::${DeploymentPackageS3BucketName}/${DeploymentPackageS3KeyPrefix}*",
                                    {
                                        "DeploymentPackageS3BucketName": {
                                            "Ref": "DeploymentPackageS3BucketName"
                                        },
                                        "DeploymentPackageS3KeyPrefix": {
                                            "Ref": "DeploymentPackageS3KeyPrefix"
                                        }
                                    }
                                ]
                            },
                            "Effect": "Allow"
                        }]
                    },
                    "PolicyName": "fortigate-autoscale-instance-policy"
                }]
            }
        },
        "FgtInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "FgtInstanceIamRole"
                }]
            }
        },
        "StackCreateFortiGateAutoScaleHandler": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeploymentPackageS3BucketName": {
                        "Ref": "DeploymentPackageS3BucketName"
                    },
                    "DeploymentPackageS3KeyPrefix": {
                        "Ref": "DeploymentPackageS3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "VpcEndPoint": {
                        "Ref": "FgtAsgVpcEndpoint"
                    },
                    "DbTableArnList": {
                        "Fn::GetAtt": [
                            "StackCreateDynamoDBTable",
                            "Outputs.TableArnList"
                        ]
                    },
                    "VpcId": {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.VpcId"
                        ]
                    },
                    "FortiGatePskSecret": {
                        "Ref": "FortiGatePskSecret"
                    },
                    "FortiGateAdminPort": {
                        "Ref": "FortiGateAdminPort"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "HeartBeatLossCount": {
                        "Ref": "HeartBeatLossCount"
                    },
                    "TransitGatewayId": {
                        "Fn::If": [
                            "CreateTransitGateway",
                            {
                                "Fn::GetAtt": [
                                    "StackCreateNewTransitGateway",
                                    "Outputs.TransitGatewayId"
                                ]
                            },
                            {
                                "Ref": "TransitGatewayId"
                            }
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/create-autoscale-handler.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "FgtAsgSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Fn::GetAtt": [
                        "StackCreateNewVPC",
                        "Outputs.VpcId"
                    ]
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [{
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "fortigate-autoscale-security-group"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "FgtAsgSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt2": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressSecFabMgmt3": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "udp",
                "FromPort": "514",
                "ToPort": "514",
                "CidrIp": {
                    "Ref": "VpcCidr"
                }
            }
        },
        "FgtAsgSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortiGateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortiGateAdminCidr"
                }
            }
        },
        "FgtAsgSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "FgtAsgSecurityGroup"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "FgtAsgVpcEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Fn::GetAtt": [
                        "StackCreateNewVPC",
                        "Outputs.VpcId"
                    ]
                },
                "SubnetIds": [{
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet1Id"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet2Id"
                        ]
                    }
                ],
                "PrivateDnsEnabled": true,
                "ServiceName": {
                    "Fn::Sub": [
                        "com.amazonaws.${region}.execute-api",
                        {
                            "region": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "SecurityGroupIds": [{
                    "Ref": "FgtAsgSecurityGroup"
                }]
            }
        },
        "StackCreateNicAttachmentService": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeploymentPackageS3BucketName": {
                        "Ref": "DeploymentPackageS3BucketName"
                    },
                    "DeploymentPackageS3KeyPrefix": {
                        "Ref": "DeploymentPackageS3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "DbTableArn": {
                        "Fn::GetAtt": [
                            "StackCreateDynamoDBTable",
                            "Outputs.NicAttachmentTableArn"
                        ]
                    },
                    "VpcId": {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.VpcId"
                        ]
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/add-nic-attachment-service.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            }
        },
        "StartNicAttachmentService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateNicAttachmentService",
                        "Outputs.CfnServiceProvider"
                    ]
                }
            }
        },
        "StackCreateFortiGateAutoScalingGroup": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "DeploymentPackageS3BucketName": {
                        "Ref": "DeploymentPackageS3BucketName"
                    },
                    "DeploymentPackageS3KeyPrefix": {
                        "Ref": "DeploymentPackageS3KeyPrefix"
                    },
                    "ResourceTagPrefix": {
                        "Ref": "ResourceTagPrefix"
                    },
                    "UniqueId": {
                        "Ref": "UniqueId"
                    },
                    "FgtAsgSubnet1Id": {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet1Id"
                        ]
                    },
                    "FgtAsgSubnet2Id": {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet2Id"
                        ]
                    },
                    "ELBV2TargetGroupARNs": "",
                    "InstanceType": {
                        "Ref": "FortiGateInstanceType"
                    },
                    "InstanceProfileArn": {
                        "Fn::GetAtt": [
                            "FgtInstanceProfile",
                            "Arn"
                        ]
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "SecurityGroupId": {
                        "Ref": "FgtAsgSecurityGroup"
                    },
                    "APIGatewayId": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.ApiGatewayId"
                        ]
                    },
                    "FgtAsgHandlerFunctionName": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionName"
                        ]
                    },
                    "FgtAsgHandlerFunctionArn": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerFunctionArn"
                        ]
                    },
                    "FgtAsgHandlerServiceArn": {
                        "Fn::GetAtt": [
                            "StackCreateFortiGateAutoScaleHandler",
                            "Outputs.FgtAsgHandlerServiceArn"
                        ]
                    },
                    "FgtAsgHealthCheckGracePeriod": {
                        "Ref": "FgtAsgHealthCheckGracePeriod"
                    },
                    "FgtAsgScaleInThreshold": {
                        "Ref": "FgtAsgScaleInThreshold"
                    },
                    "FgtAsgScaleOutThreshold": {
                        "Ref": "FgtAsgScaleOutThreshold"
                    },
                    "FgtAsgDesiredCapacity": 0,
                    "FgtAsgMinSize": 0,
                    "FgtAsgMaxSize": {
                        "Ref": "FgtAsgMaxSize"
                    },
                    "FgtAsgCooldown": {
                        "Ref": "FgtAsgCooldown"
                    },
                    "LifecycleHookTimeout": {
                        "Ref": "LifecycleHookTimeout"
                    },
                    "HeartBeatLossCount": {
                        "Ref": "HeartBeatLossCount"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${DeploymentPackageS3BucketName}.${S3Region}.amazonaws.com/${DeploymentPackageS3KeyPrefix}templates/create-auto-scaling-group.template",
                        {
                            "S3Region": {
                                "Fn::If": [
                                    "GovCloudCondition",
                                    "s3-us-gov-west-1",
                                    "s3"
                                ]
                            },
                            "DeploymentPackageS3BucketName": {
                                "Ref": "DeploymentPackageS3BucketName"
                            },
                            "DeploymentPackageS3KeyPrefix": {
                                "Ref": "DeploymentPackageS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "10"
            },
            "DependsOn": [
                "StartNicAttachmentService",
                "StopFortiGateAutoScalingGroupService"
            ]
        },
        "StartFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "initiate",
                "DesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacity"
                },
                "MinSize": {
                    "Ref": "FgtAsgMinSize"
                },
                "MaxSize": {
                    "Ref": "FgtAsgMaxSize"
                },
                "Subnet1": {
                    "Fn::GetAtt": [
                        "StackCreateNewVPC",
                        "Outputs.PublicSubnet1Id"
                    ]
                },
                "Subnet1Pair": "",
                "Subnet2": {
                    "Fn::GetAtt": [
                        "StackCreateNewVPC",
                        "Outputs.PublicSubnet2Id"
                    ]
                },
                "Subnet2Pair": ""
            },
            "DependsOn": [
                "StackCreateFortiGateAutoScalingGroup"
            ]
        },
        "StopFortiGateAutoScalingGroupService": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "StackCreateFortiGateAutoScaleHandler",
                        "Outputs.FgtAsgHandlerServiceArn"
                    ]
                },
                "ServiceType": "stop",
                "DesiredCapacity": {
                    "Ref": "FgtAsgDesiredCapacity"
                },
                "MinSize": {
                    "Ref": "FgtAsgMinSize"
                },
                "MaxSize": {
                    "Ref": "FgtAsgMaxSize"
                }
            }
        },
        "TransitGatewayAttachmentFgtVPC": {
            "Type": "AWS::EC2::TransitGatewayAttachment",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "VpcId": {
                    "Fn::GetAtt": [
                        "StackCreateNewVPC",
                        "Outputs.VpcId"
                    ]
                },
                "SubnetIds": [{
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet1Id"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "StackCreateNewVPC",
                            "Outputs.PublicSubnet2Id"
                        ]
                    }
                ],
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [{
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-attachment-fortigate-vpc"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayRouteTableInline": {
            "Type": "AWS::EC2::TransitGatewayRouteTable",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [{
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-route-table-inline"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayRouteTableFgtVPC": {
            "Type": "AWS::EC2::TransitGatewayRouteTable",
            "Properties": {
                "TransitGatewayId": {
                    "Fn::If": [
                        "CreateTransitGateway",
                        {
                            "Fn::GetAtt": [
                                "StackCreateNewTransitGateway",
                                "Outputs.TransitGatewayId"
                            ]
                        },
                        {
                            "Ref": "TransitGatewayId"
                        }
                    ]
                },
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [{
                                        "Ref": "ResourceTagPrefix"
                                    },
                                    "transit-gateway-route-table-fortigate-vpc"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "ResourceGroup",
                        "Value": {
                            "Ref": "ResourceTagPrefix"
                        }
                    }
                ]
            }
        },
        "TransitGatewayRouteToFgtAsgVPC": {
            "Type": "AWS::EC2::TransitGatewayRoute",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "TransitGatewayAttachmentId": {
                    "Ref": "TransitGatewayAttachmentFgtVPC"
                },
                "TransitGatewayRouteTableId": {
                    "Ref": "TransitGatewayRouteTableInline"
                }
            },
            "DependsOn": [
                "TransitGatewayAttachmentFgtVPC"
            ]
        },
        "TransitGatewayAssocFgtAsgVPC": {
            "Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
            "Properties": {
                "TransitGatewayAttachmentId": {
                    "Ref": "TransitGatewayAttachmentFgtVPC"
                },
                "TransitGatewayRouteTableId": {
                    "Ref": "TransitGatewayRouteTableFgtVPC"
                }
            },
            "DependsOn": [
                "TransitGatewayAttachmentFgtVPC",
                "TransitGatewayRouteToFgtAsgVPC"
            ]
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Resource tagging configuration"
                    },
                    "Parameters": [
                        "ResourceTagPrefix",
                        "CustomIdentifier"
                    ]
                },
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VpcCidr",
                        "PublicSubnet1Cidr",
                        "PublicSubnet2Cidr"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate configuration"
                    },
                    "Parameters": [
                        "FortiGateInstanceType",
                        "FortiGatePskSecret",
                        "FortiGateAdminPort",
                        "FortiGateAdminCidr",
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate auto scaling group configuration"
                    },
                    "Parameters": [
                        "LifecycleHookTimeout",
                        "FgtAsgDesiredCapacity",
                        "FgtAsgMinSize",
                        "FgtAsgMaxSize",
                        "FgtAsgHealthCheckGracePeriod",
                        "FgtAsgCooldown",
                        "FgtAsgScaleOutThreshold",
                        "FgtAsgScaleInThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "Transit Gateway configuration"
                    },
                    "Parameters": [
                        "TransitGatewaySupportOptions",
                        "TransitGatewayId"
                    ]
                },
                {
                    "Label": {
                        "default": "Failover management configuration"
                    },
                    "Parameters": [
                        "HeartBeatLossCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Deployment resources configuration"
                    },
                    "Parameters": [
                        "DeploymentPackageS3BucketName",
                        "DeploymentPackageS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "CustomIdentifier": {
                    "default": "Resource name prefix"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VpcCidr": {
                    "default": "VPC CIDR"
                },
                "PublicSubnet1Cidr": {
                    "default": "Autoscale subnet 1 CIDR"
                },
                "PublicSubnet2Cidr": {
                    "default": "Autoscale subnet 2 CIDR"
                },
                "FortiGateInstanceType": {
                    "default": "Instance type"
                },
                "DeploymentPackageS3BucketName": {
                    "default": "S3 bucket name"
                },
                "DeploymentPackageS3KeyPrefix": {
                    "default": "S3 key prefix"
                },
                "LifecycleHookTimeout": {
                    "default": "Instance lifecycle timeout"
                },
                "FgtAsgCooldown": {
                    "default": "Scaling cooldown period"
                },
                "FgtAsgDesiredCapacity": {
                    "default": "Desired capacity"
                },
                "FgtAsgMinSize": {
                    "default": "Minimum group size"
                },
                "FgtAsgMaxSize": {
                    "default": "Maximum group size"
                },
                "FgtAsgHealthCheckGracePeriod": {
                    "default": "Health check grace period"
                },
                "FgtAsgScaleInThreshold": {
                    "default": "Scale-in threshold"
                },
                "FgtAsgScaleOutThreshold": {
                    "default": "Scale-out threshold"
                },
                "FortiGateAdminPort": {
                    "default": "Admin port"
                },
                "FortiGateAdminCidr": {
                    "default": "Admin CIDR block"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "FortiGatePskSecret": {
                    "default": "FortiGate PSK secret"
                },
                "HeartBeatLossCount": {
                    "default": "Heart beat loss count"
                },
                "TransitGatewaySupportOptions": {
                    "default": "Transit Gateway support"
                },
                "TransitGatewayId": {
                    "default": "Transit Gateway ID"
                },
                "ResourceTagPrefix": {
                    "default": "Resource tag prefix"
                }
            }
        }
    },
    "Outputs": {
        "CustomIdentifier": {
            "Description": "A custom identifier as a resource name prefix.",
            "Value": {
                "Ref": "CustomIdentifier"
            }
        },
        "UniqueID": {
            "Description": "A globally unique ID for your stack.",
            "Value": {
                "Fn::Select": [
                    0,
                    {
                        "Fn::Split": [
                            "-",
                            {
                                "Fn::Select": [
                                    2,
                                    {
                                        "Fn::Split": [
                                            "/",
                                            {
                                                "Ref": "AWS::StackId"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        }
    }
}
