{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.11",
    "parameters": {
        "ResourceNamePrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "The prefix for all applicable resource names. Must be at most 10 characters long and only contain uppercase letters, lowercase letters, and numbers."
            }
        },
        "VnetDeploymentMethod": {
            "type": "string",
            "defaultValue": "create new vnet in the same resource group",
            "allowedValues": [
                "create new vnet in the same resource group",
                "create new vnet in an existing resource group",
                "use existing vnet in an existing resource group"
            ],
            "metadata": {
                "description": "Options for Virtual Network deployment."
            }
        },
        "VnetResourceGroupName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specify the name of the resource group that contains the Virtual Network and related network components depending on your selection for 'Vnet Deployment Method' parameter. For 'create new vnet in the same resource group', template will ignore this input value and use the value of 'Resource Group'. For 'create new vnet in an existing resource group' and 'use existing vnet in an existing resource group', it's the name of an existing resource group to deploy."
            }
        },
        "VnetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "It is the name of the existing Azure virtual network to connect to the FortiGate Autoscale. If left empty, the template will generate a name for the virtual network."
            }
        },
        "VnetAddressSpace": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "IP address space of the virtual network in CIDR notation. E.g. 10.0.0.0/16. Required if deploy using an existing vnet. If deploy using an existing vnet, it should match the address space of the target vnet."
            }
        },
        "Subnet1Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Subnet 1 name. It's also the subnet to deploy FortiGate vmss. Required if deploy using an existing vnet, otherwise, will be ignored.  If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet1AddressRange": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "For deploying to a new vnet, it defines the subnet 1's address range in CIDR notation (e.g. 10.0.0.0/24). It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited. If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet2Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Subnet 2 name. It's one of the subnets to be protected by the FortiGate. Required if deploy using an existing vnet, otherwise, will be ignored.  If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet2AddressRange": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "For deploying to a new vnet, it defines the subnet 2's address range in CIDR notation (e.g. 10.0.1.0/24). It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited. If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet3Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Subnet 3 name. It's one of the subnets to be protected by the FortiGate. Required if deploy using an existing vnet, otherwise, will be ignored.  If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet3AddressRange": {
            "type": "string",
            "defaultValue": "10.0.2.0/24",
            "metadata": {
                "description": "For deploying to a new vnet, it defines the subnet 3's address range in CIDR notation (e.g. 10.0.2.0/24). It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited. If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet4Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Subnet 4 name. It's one of the subnets to be protected by the FortiGate. Required if deploy using an existing vnet, otherwise, will be ignored.  If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "Subnet4AddressRange": {
            "type": "string",
            "defaultValue": "10.0.3.0/24",
            "metadata": {
                "description": "For deploying to a new vnet, it defines the subnet 4's address range in CIDR notation (e.g. 10.0.3.0/24). It must be contained by the address space of the virtual network. The address range of a subnet which is in use can't be edited. If deploy using an existing vnet, it should match the subnets of the target vnet."
            }
        },
        "NetworkSecurityGroupName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specify the name of the Network Security Group. It is the name of the existing network security group associated with the subnets in the virtual network. Required if Vnet Deployment Method is set to 'use existing vnet in an existing resource group'. For the other options in Vnet Deployment Method, if this parameter is left empty, the template will generate a name for it."
            }
        },
        "FrontendIPDeploymentMethod": {
            "type": "string",
            "defaultValue": "create new public IP address",
            "allowedValues": [
                "create new public IP address",
                "use existing public IP address"
            ],
            "metadata": {
                "description": "Deployment method of the frontend public IP for the external load balancer. If create new public IP address, this IP address will be deployed to the resource group where the virtual network is located. If use existing one, the existing IP addres must reside in the same resource group as the virtual network and it must be of the 'standard' sku in order to match the vmss."
            }
        },
        "FrontendIPName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specify the name of the frontend public IP address. If Frontend IP Deployment Method is set to 'create new public IP address' and this parameter is left empty, the template will generate one for the new IP."
            }
        },
        "LoadBalancerIP": {
            "type": "string",
            "defaultValue": "10",
            "metadata": {
                "description": "The last octet of the Front End Private IP address to be used by the Load Balancer. For example, if set to 10, the Private IP for the Load Balancer  in the subnet with prefix 10.0.1.0/24 would be 10.0.1.10."
            }
        },
        "InstanceType": {
            "type": "string",
            "defaultValue": "Standard_F4",
            "allowedValues": [
                "Standard_F4s_v2",
                "Standard_F4s",
                "Standard_F4"
            ],
            "metadata": {
                "description": "Size of the VMs in the VM Scale Set."
            }
        },
        "FOSVersion": {
            "defaultValue": "6.2.1",
            "type": "string",
            "metadata": {
                "description": "FortiOS version supported by FortiGate autoscale for Azure."
            },
            "allowedValues": [
                "6.2.1",
                "6.0.6"
            ]
        },
        "FortiGatePSKSecret": {
            "type": "securestring",
            "metadata": {
                "description": "The pre-shared key used by FortiGates in the scale set to synchronize configuration items."
            }
        },
        "AdminUsername": {
            "defaultValue": "azureadmin",
            "type": "string",
            "metadata": {
                "description": "FortiGate administrator username on all VMs."
            }
        },
        "AdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "FortiGate administrator password on all VMs. This field must be between 11 and 26 characters and must include at least one uppercase letter, one lowercase letter, one digit, and one special character such as (! @ # $ %)."
            }
        },
        "StorageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS"
            ],
            "metadata": {
                "description": "Storage account type."
            }
        },
        "RestAppID": {
            "type": "string",
            "metadata": {
                "description": "Application ID for the Registered app. This is under Azure Active Directory > App registrations > {your app}."
            }
        },
        "RestAppSecret": {
            "type": "string",
            "metadata": {
                "description": "Password (Authentication key) for the Registered app."
            }
        },
        "BYOLInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "The number of FortiGate instances the BYOL virtual machine scale set should have at any time. For High Availability in BYOL-only and Hybrid use cases, ensure at least 2 FortiGates are in the group. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing."
            },
            "defaultValue": 2,
            "minValue": 0
        },
        "MinBYOLInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "Minimum number of FortiGate instances in the BYOL virtual machine scale set. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing."
            },
            "defaultValue": 2,
            "minValue": 0
        },
        "MaxBYOLInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "Maximum number of FortiGate instances in the BYOL virtual machine scale set. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing. This number must be greater than or equal to the Min BYOL Instance Count."
            },
            "defaultValue": 2,
            "minValue": 0
        },
        "PAYGInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "The number of FortiGate instances the PAYG virtual machine scale set should have at any time. For High Availability in a PAYG-only use case, ensure at least 2 FortiGates are in the group. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing."
            },
            "minValue": 0,
            "defaultValue": 0
        },
        "MinPAYGInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "Minimum number of FortiGate instances in the PAYG virtual machine scale set. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing."
            },
            "defaultValue": 0,
            "minValue": 0
        },
        "MaxPAYGInstanceCount": {
            "type": "int",
            "metadata": {
                "description": "Maximum number of FortiGate instances in the PAYG virtual machine scale set. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing. This number must be greater than or equal to the Min PAYG Instance Count."
            },
            "minValue": 0,
            "defaultValue": 6
        },
        "ScaleOutThreshold": {
            "defaultValue": 80,
            "type": "int",
            "metadata": {
                "description": "Percentage of CPU utilization at which scale-out should occur."
            }
        },
        "ScaleInThreshold": {
            "defaultValue": 20,
            "type": "int",
            "metadata": {
                "description": "Percentage of CPU utilization at which scale-in should occur."
            }
        },
        "MasterElectionTimeout": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "The maximum time (in seconds) to wait for a master election to complete."
            }
        },
        "GetLicenseGracePeriod": {
            "type": "int",
            "defaultValue": 600,
            "minValue": 300,
            "metadata": {
                "description": "The minimum time (in seconds) permitted before a distributed license can be revoked from a non-responsive FortiGate and re-distributed. Minimum is 300."
            }
        },
        "HeartBeatInterval": {
            "type": "int",
            "defaultValue": 30,
            "minValue": 30,
            "maxValue": 90,
            "metadata": {
                "description": "The amount of time (in seconds) for FortiGate to send a heartbeat to the Autoscale handler. Minimum is 30. Maximum is 90."
            }
        },
        "HeartBeatLossCount": {
            "type": "int",
            "defaultValue": 3,
            "minValue": 3,
            "metadata": {
                "description": "Number of consecutively lost heartbeats. When the Heartbeat Loss Count has been reached, the VM is deemed unhealthy and failover activities will commence."
            }
        },
        "HeartBeatDelayAllowance": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 0,
            "metadata": {
                "description": "The maximum amount of time (in seconds) allowed for network latency of the FortiGate heartbeat arriving at the Autoscale handler. Minimum is 0."
            }
        },
        "ScriptTimeout": {
            "type": "int",
            "defaultValue": 230,
            "minValue": 30,
            "maxValue": 230,
            "metadata": {
                "description": "Timeout value (in seconds) for the Azure function script. Minimum is 30. Maximum is 230."
            }
        },
        "PackageResURL": {
            "type": "string",
            "metadata": {
                "description": "The public URL of the deployment package zip file that contains the resource used to deploy the Function App. This URL must be accessible by Azure."
            }
        }
    },
    "variables": {
        "uniqueId": "[take(uniquestring(resourceGroup().id), 8)]",
        "uniqueResourceNamePrefix": "[concat(parameters('ResourceNamePrefix'), variables('uniqueId'))]",
        "resourceGroupName": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "functionAppName": "[concat(variables('uniqueResourceNamePrefix'),'funcapp')]",
        "hostingPlanName": "[concat(variables('functionAppName'),'-service-plan')]",
        "functionAppInsightName": "[concat(variables('functionAppName'),'-insights')]",
        "functionAppInsightAvailableLocations": [
            "eastus",
            "eastus2",
            "southcentralus",
            "westus",
            "westus2",
            "canadacentral"
        ],
        "enableAzureAppInsights": "[contains(variables('functionAppInsightAvailableLocations'), variables('location'))]",
        "databaseAccountName": "[concat(variables('uniqueResourceNamePrefix'),'dba001')]",
        "databaseName": "FortiGateAutoscale",
        "databaseSharedThroughputBase": 500,
        "storageAccountName": "[concat(variables('uniqueResourceNamePrefix'),'sta001')]",
        "storageAccountId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "configsetAssetKeyPrefix": "configset",
        "licenseAssetKeyPrefix": "fgt-asg-license",
        "enableHybridLicensing": true,
        "enableFortiAnalyzer": false,
        "databaseTableNameList": "[concat('FortiGateAutoscale, FortiGateMasterElection, Settings, CustomLog, VmInfoCache', if(variables('enableHybridLicensing'), ', LicenseStock, LicenseUsage', ''), if(variables('enableFortiAnalyzer'), ', FortiAnalyzer', ''))]",
        "databaseSharedThroughput": "[add(add(variables('databaseSharedThroughputBase'), if(variables('enableHybridLicensing'), 200, 0)), if(variables('enableFortiAnalyzer'), 100, 0))]",
        "ifCreateVNetInSameRSG": "[equals(parameters('VnetDeploymentMethod'), 'create new vnet in the same resource group')]",
        "ifCreateVNetInExistingRSG": "[equals(parameters('VnetDeploymentMethod'), 'create new vnet in an existing resource group')]",
        "ifCreateVNet": "[or(variables('ifCreateVNetInSameRSG'), variables('ifCreateVNetInExistingRSG'))]",
        "vNetResourceGroupName": "[if(variables('ifCreateVNetInSameRSG'), resourceGroup().name, parameters('VnetResourceGroupName'))]",
        "vNetName": "[if(empty(parameters('VnetName')), concat(variables('uniqueResourceNamePrefix'), '-virtual-network'), parameters('VnetName'))]",
        "vnetID": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'))]",
        "vNetAddressPrefix": "[parameters('VnetAddressSpace')]",
        "subnet1Prefix": "[parameters('Subnet1AddressRange')]",
        "subnet2Prefix": "[parameters('Subnet2AddressRange')]",
        "subnet3Prefix": "[parameters('Subnet3AddressRange')]",
        "subnet4Prefix": "[parameters('Subnet4AddressRange')]",
        "subnet1Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet1Name'))), concat(variables('vNetName'), '-subnet1'), parameters('Subnet1Name'))]",
        "subnet2Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet1Name'))), concat(variables('vNetName'), '-subnet2'), parameters('Subnet2Name'))]",
        "subnet3Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet1Name'))), concat(variables('vNetName'), '-subnet3'), parameters('Subnet3Name'))]",
        "subnet4Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet1Name'))), concat(variables('vNetName'), '-subnet4'), parameters('Subnet4Name'))]",
        "subnet2Id": "[concat(variables('vnetID'),'/Subnets/', variables('subnet2Name'))]",
        "subnet3Id": "[concat(variables('vnetID'),'/Subnets/', variables('subnet3Name'))]",
        "subnet4Id": "[concat(variables('vnetID'),'/Subnets/', variables('subnet4Name'))]",
        "subnet2LoadBalancerIP": "[concat(substring(variables('subnet2Prefix'), 0, lastIndexOf(variables('subnet2Prefix'), '.')),'.', parameters('LoadBalancerIP'))]",
        "subnet3LoadBalancerIP": "[concat(substring(variables('subnet3Prefix'), 0, lastIndexOf(variables('subnet3Prefix'), '.')),'.', parameters('LoadBalancerIP'))]",
        "subnet4LoadBalancerIP": "[concat(substring(variables('subnet4Prefix'), 0, lastIndexOf(variables('subnet4Prefix'), '.')),'.', parameters('LoadBalancerIP'))]",
        "networkSecurityGroupName": "[if(and(variables('ifCreateVNet'), empty(parameters('NetworkSecurityGroupName'))), concat(parameters('ResourceNamePrefix'), '-network-security-group'), parameters('NetworkSecurityGroupName'))]",
        "networkSecurityGroupId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]",
        "vmssNameBYOL": "[concat(parameters('ResourceNamePrefix'), 'byol')]",
        "vmssNamePAYG": "[concat(parameters('ResourceNamePrefix'), 'payg')]",
        "ifPAYGOnly": "[equals(parameters('BYOLInstanceCount'), 0)]",
        "ifBYOLOnly": "[and(not(equals(parameters('MaxBYOLInstanceCount'), 0)), not(equals(parameters('MaxBYOLInstanceCount'), 0)), equals(parameters('MinPAYGInstanceCount'), 0), equals(parameters('MaxPAYGInstanceCount'), 0))]",
        "licensingModel": "[if(variables('ifPAYGOnly'), 'paygonly', if(variables('ifBYOLOnly'), 'byolonly', 'hybrid'))]",
        "licensingModelName": "[if(variables('ifPAYGOnly'), 'PAYG-Only', if(variables('ifBYOLOnly'), 'BYOL-Only', 'Hybrid'))]",
        "vmssNameMaster": "[if(variables('ifPAYGOnly'), variables('vmssNamePAYG'), variables('vmssNameBYOL'))]",
        "ifCreateNewPublicIP": "[equals(parameters('FrontendIPDeploymentMethod'), 'create new public IP address')]",
        "publicIPAddressName": "[if(and(variables('ifCreateNewPublicIP'), empty(parameters('FrontendIPName'))), concat(variables('vNetName'), '-ext-lb-public-ip'), parameters('FrontendIPName'))]",
        "publicIPAddressId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "externalLoadBalancerName": "[concat(parameters('ResourceNamePrefix'), '-external-load-balancer')]",
        "extLBInboundNatPoolSSH": "[concat(variables('vmssNameBYOL'), '-nat-pool-ssh')]",
        "extLBInboundNatPoolHTTPS": "[concat(variables('vmssNameBYOL'), '-nat-pool-https')]",
        "extLBFrontendPortRangeStartSSH": 50030,
        "extLBFrontendPortRangeEndSSH": 50120,
        "extLBFrontendPortRangeStartHTTPS": 40030,
        "extLBFrontendPortRangeEndHTTPS": 40120,
        "extLBFrontendIPConfigNameSubnet1": "external-lb-frontend-ip-config-subnet-1",
        "internalLoadBalancerName": "[concat(parameters('ResourceNamePrefix'), '-internal-load-balancer')]",
        "intLBInboundNatPoolSSH": "[concat(variables('vmssNamePAYG'), '-nat-pool-ssh')]",
        "intLBInboundNatPoolHTTPS": "[concat(variables('vmssNamePAYG'), '-nat-pool-https')]",
        "intLBFrontendPortRangeStartSSH": 50000,
        "intLBFrontendPortRangeEndSSH": 50020,
        "intLBFrontendPortRangeStartHTTPS": 40000,
        "intLBFrontendPortRangeEndHTTPS": 40020,
        "natBackendPort": 22,
        "natBackendPortHTTPS": 8443,
        "intLBFrontendIPConfigNameSubnet2": "internal-lb-frontend-ip-config-subnet-2",
        "intLBFrontendIPConfigNameSubnet3": "internal-lb-frontend-ip-config-subnet-3",
        "intLBFrontendIPConfigNameSubnet4": "internal-lb-frontend-ip-config-subnet-4",
        "loadBalancerBackendIPPoolNameSubnet1": "[concat(parameters('ResourceNamePrefix'), '-backend-ip-pool-subnet-1')]",
        "loadBalancerBackendIPPoolNameSubnet2": "[concat(parameters('ResourceNamePrefix'), '-backend-ip-pool-subnet-2')]",
        "loadBalancerBackendIPPoolNameSubnet3": "[concat(parameters('ResourceNamePrefix'), '-backend-ip-pool-subnet-3')]",
        "loadBalancerBackendIPPoolNameSubnet4": "[concat(parameters('ResourceNamePrefix'), '-backend-ip-pool-subnet-4')]",
        "subnet1IPConfigName": "[concat(parameters('ResourceNamePrefix'), '-ip-config-subnet1')]",
        "subnet2IPConfigName": "[concat(parameters('ResourceNamePrefix'), '-ip-config-subnet2')]",
        "subnet3IPConfigName": "[concat(parameters('ResourceNamePrefix'), '-ip-config-subnet3')]",
        "subnet4IPConfigName": "[concat(parameters('ResourceNamePrefix'), '-ip-config-subnet4')]",
        "intRouteTable1Name": "[concat(variables('subnet2Name'),'-route-table')]",
        "intRouteTable2Name": "[concat(variables('subnet3Name'),'-route-table')]",
        "intRouteTable3Name": "[concat(variables('subnet4Name'),'-route-table')]",
        "intRouteTable1Id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/routeTables/',variables('intRouteTable1Name'))]",
        "intRouteTable2Id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/routeTables/',variables('intRouteTable2Name'))]",
        "intRouteTable3Id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/routeTables/',variables('intRouteTable3Name'))]",
        "fgtvmImagePAYG": {
            "publisher": "Fortinet",
            "offer": "fortinet_fortigate-vm_v5",
            "sku": "fortinet_fg-vm_payg_20190624",
            "version": "[parameters('fosversion')]"
        },
        "fgtvmImageBYOL": {
            "publisher": "Fortinet",
            "offer": "fortinet_fortigate-vm_v5",
            "sku": "fortinet_fg-vm",
            "version": "[parameters('fosversion')]"
        },
        "funcappURL": "[concat('https://', variables('functionAppName'), '.azurewebsites.net')]",
        "LicenseEndPoints": "[concat(variables('funcappURL'), '/api/byol-license')]",
        "autoscaleEndPoints": "[concat(variables('funcappURL'), '/api/fgt-asg-handler')]",
        "userdataPAYG": "[concat('{\"config-url\": \"', variables('autoscaleEndPoints'), '\"}\n')]",
        "userdataBYOL": "[concat('{\"license-url\": \"', variables('LicenseEndPoints'), '\",\"config-url\": \"', variables('autoscaleEndPoints'), '\"}\n')]",
        "autoscalingSettings": {
            "byolonly": {
                "byol": [
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "GreaterThan",
                            "threshold": "[parameters('ScaleOutThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Increase",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    },
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "LessThan",
                            "threshold": "[parameters('ScaleInThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Decrease",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    }
                ],
                "payg": [
                ]
            },
            "hybrid": {
                "byol": [
                ],
                "payg": [
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "GreaterThan",
                            "threshold": "[parameters('ScaleOutThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Increase",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    },
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "GreaterThan",
                            "threshold": "[parameters('ScaleOutThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Increase",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    },
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "LessThan",
                            "threshold": "[parameters('ScaleInThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Decrease",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    },
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "LessThan",
                            "threshold": "[parameters('ScaleInThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Decrease",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    }
                ]
            },
            "paygonly": {
                "byol": [
                ],
                "payg": [
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "GreaterThan",
                            "threshold": "[parameters('ScaleOutThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Increase",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    },
                    {
                        "metricTrigger": {
                            "metricName": "Percentage CPU",
                            "metricNamespace": "",
                            "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]",
                            "timeGrain": "PT1M",
                            "statistic": "Average",
                            "timeWindow": "PT5M",
                            "timeAggregation": "Average",
                            "operator": "LessThan",
                            "threshold": "[parameters('ScaleInThreshold')]"
                        },
                        "scaleAction": {
                            "direction": "Decrease",
                            "type": "ChangeCount",
                            "value": "1",
                            "cooldown": "PT1M"
                        }
                    }
                ]
            }
        }
    },
    "resources": [
        {
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('StorageAccountType')]"
            },
            "resources": [
                {
                    "name": "[concat('default/', variables('configsetAssetKeyPrefix'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "2019-04-01",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                },
                {
                    "name": "[concat('default/',variables('licenseAssetKeyPrefix'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "2019-04-01",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "apiVersion": "2018-05-01",
            "name": "VNetRelatedResources",
            "type": "Microsoft.Resources/deployments",
            "resourceGroup": "[variables('vNetResourceGroupName')]",
            "subscriptionId": "[subscription().subscriptionId]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                    },
                    "variables": {
                    },
                    "resources": [
                        {
                            "condition": "[variables('ifCreateVNet')]",
                            "type": "Microsoft.Network/routeTables",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('intRouteTable1Name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "routes": [
                                    {
                                        "name": "to-subnet1",
                                        "properties": {
                                            "addressPrefix": "0.0.0.0/0",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet2LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet3",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet3Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet2LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet4",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet4Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet2LoadBalancerIP')]"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[variables('ifCreateVNet')]",
                            "type": "Microsoft.Network/routeTables",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('intRouteTable2Name')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "routes": [
                                    {
                                        "name": "to-subnet1",
                                        "properties": {
                                            "addressPrefix": "0.0.0.0/0",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet3LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet2",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet2Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet3LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet4",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet4Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet3LoadBalancerIP')]"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[variables('ifCreateVNet')]",
                            "type": "Microsoft.Network/routeTables",
                            "name": "[variables('intRouteTable3Name')]",
                            "apiVersion": "2019-04-01",
                            "location": "[variables('location')]",
                            "properties": {
                                "routes": [
                                    {
                                        "name": "to-subnet1",
                                        "properties": {
                                            "addressPrefix": "0.0.0.0/0",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet4LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet2",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet2Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet4LoadBalancerIP')]"
                                        }
                                    },
                                    {
                                        "name": "to-subnet3",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet3Prefix')]",
                                            "nextHopType": "VirtualAppliance",
                                            "nextHopIPAddress": "[variables('subnet4LoadBalancerIP')]"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[variables('ifCreateVNet')]",
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('networkSecurityGroupName')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "securityRules": [
                                    {
                                        "name": "AllowAllInbound",
                                        "properties": {
                                            "description": "Allow all in",
                                            "protocol": "*",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "*",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 100,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowAllOutbound",
                                        "properties": {
                                            "description": "Allow all out",
                                            "protocol": "*",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "*",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Allow",
                                            "priority": 105,
                                            "direction": "Outbound"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[variables('ifCreateVNet')]",
                            "dependsOn": [
                                "[variables('networkSecurityGroupId')]",
                                "[variables('intRouteTable1Id')]"
                            ],
                            "type": "Microsoft.Network/virtualNetworks",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('vNetName')]",
                            "location": "[variables('location')]",
                            "properties": {
                                "addressSpace": {
                                    "addressPrefixes": [
                                        "[variables('vNetAddressPrefix')]"
                                    ]
                                },
                                "Subnets": [
                                    {
                                        "name": "[variables('subnet1Name')]",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet1Prefix')]",
                                            "networkSecurityGroup": {
                                                "id": "[variables('networkSecurityGroupId')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('subnet2Name')]",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet2Prefix')]",
                                            "networkSecurityGroup": {
                                                "id": "[variables('networkSecurityGroupId')]"
                                            },
                                            "routeTable": {
                                                "id": "[variables('intRouteTable1Id')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('subnet3Name')]",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet3Prefix')]",
                                            "networkSecurityGroup": {
                                                "id": "[variables('networkSecurityGroupId')]"
                                            },
                                            "routeTable": {
                                                "id": "[variables('intRouteTable2Id')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('subnet4Name')]",
                                        "properties": {
                                            "addressPrefix": "[variables('subnet4Prefix')]",
                                            "networkSecurityGroup": {
                                                "id": "[variables('networkSecurityGroupId')]"
                                            },
                                            "routeTable": {
                                                "id": "[variables('intRouteTable3Id')]"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "condition": "[variables('ifCreateNewPublicIP')]",
                            "type": "Microsoft.Network/publicIPAddresses",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('publicIPAddressName')]",
                            "location": "[variables('location')]",
                            "sku": {
                                "name": "Standard"
                            },
                            "properties": {
                                "publicIPAllocationMethod": "Static",
                                "dnsSettings": {
                                    "domainNameLabel": "[variables('uniqueResourceNamePrefix')]"
                                }
                            }
                        },
                        {
                            "type": "Microsoft.Network/loadBalancers",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('internalLoadBalancerName')]",
                            "location": "[variables('location')]",
                            "sku": {
                                "name": "Standard"
                            },
                            "dependsOn": [
                                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
                            ],
                            "properties": {
                                "frontendIPConfigurations": [
                                    {
                                        "name": "[variables('intLBFrontendIPConfigNameSubnet2')]",
                                        "properties": {
                                            "privateIPAddress": "[variables('subnet2LoadBalancerIP')]",
                                            "privateIPAllocationMethod": "Static",
                                            "Subnet": {
                                                "id": "[variables('subnet2Id')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('intLBFrontendIPConfigNameSubnet3')]",
                                        "properties": {
                                            "privateIPAddress": "[variables('subnet3LoadBalancerIP')]",
                                            "privateIPAllocationMethod": "Static",
                                            "Subnet": {
                                                "id": "[variables('subnet3Id')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('intLBFrontendIPConfigNameSubnet4')]",
                                        "properties": {
                                            "privateIPAddress": "[variables('subnet4LoadBalancerIP')]",
                                            "privateIPAllocationMethod": "Static",
                                            "Subnet": {
                                                "id": "[variables('subnet4Id')]"
                                            }
                                        }
                                    }
                                ],
                                "backendAddressPools": [
                                    {
                                        "name": "[variables('loadBalancerBackendIPPoolNameSubnet2')]"
                                    },
                                    {
                                        "name": "[variables('loadBalancerBackendIPPoolNameSubnet3')]"
                                    },
                                    {
                                        "name": "[variables('loadBalancerBackendIPPoolNameSubnet4')]"
                                    }
                                ],
                                "loadBalancingRules": [
                                    {
                                        "name": "[concat(variables('internalLoadBalancerName'), '-rule-subnet2')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/frontendIPConfigurations/', variables('intLBFrontendIPConfigNameSubnet2'))]"
                                            },
                                            "backendAddressPool": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/backendAddressPools/',variables('loadBalancerBackendIPPoolNameSubnet2'))]"
                                            },
                                            "protocol": "All",
                                            "frontendPort": 0,
                                            "backendPort": 0,
                                            "loadDistribution": "SourceIP",
                                            "probe": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/probes/tcpProbe')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[concat(variables('internalLoadBalancerName'), '-rule-subnet3')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/frontendIPConfigurations/',variables('intLBFrontendIPConfigNameSubnet3'))]"
                                            },
                                            "backendAddressPool": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/backendAddressPools/',variables('loadBalancerBackendIPPoolNameSubnet3'))]"
                                            },
                                            "protocol": "All",
                                            "frontendPort": 0,
                                            "backendPort": 0,
                                            "loadDistribution": "SourceIP",
                                            "probe": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/probes/tcpProbe')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[concat(variables('internalLoadBalancerName'), '-rule-subnet4')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/frontendIPConfigurations/', variables('intLBFrontendIPConfigNameSubnet4'))]"
                                            },
                                            "backendAddressPool": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/backendAddressPools/',variables('loadBalancerBackendIPPoolNameSubnet4'))]"
                                            },
                                            "protocol": "All",
                                            "frontendPort": 0,
                                            "backendPort": 0,
                                            "loadDistribution": "SourceIP",
                                            "probe": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/probes/tcpProbe')]"
                                            }
                                        }
                                    }
                                ],
                                "probes": [
                                    {
                                        "name": "tcpProbe",
                                        "properties": {
                                            "protocol": "Tcp",
                                            "port": 22,
                                            "intervalInSeconds": 5,
                                            "numberOfProbes": 3
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Network/loadBalancers",
                            "apiVersion": "2019-04-01",
                            "name": "[variables('externalLoadBalancerName')]",
                            "location": "[variables('location')]",
                            "sku": {
                                "name": "Standard"
                            },
                            "dependsOn": [
                                "[variables('publicIPAddressId')]"
                            ],
                            "properties": {
                                "frontendIPConfigurations": [
                                    {
                                        "name": "[variables('extLBFrontendIPConfigNameSubnet1')]",
                                        "properties": {
                                            "publicIPAddress": {
                                                "id": "[variables('publicIPAddressId')]"
                                            }
                                        }
                                    }
                                ],
                                "backendAddressPools": [
                                    {
                                        "name": "[variables('loadBalancerBackendIPPoolNameSubnet1')]"
                                    }
                                ],
                                "inboundNatPools": [
                                    {
                                        "name": "[variables('extLBInboundNatPoolSSH')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPortRangeStart": "[variables('extLBFrontendPortRangeStartSSH')]",
                                            "frontendPortRangeEnd": "[variables('extLBFrontendPortRangeEndSSH')]",
                                            "backendPort": "[variables('natBackendPort')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('extLBInboundNatPoolHTTPS')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPortRangeStart": "[variables('extLBFrontendPortRangeStartHTTPS')]",
                                            "frontendPortRangeEnd": "[variables('extLBFrontendPortRangeEndHTTPS')]",
                                            "backendPort": "[variables('natBackendPortHTTPS')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('intLBInboundNatPoolSSH')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPortRangeStart": "[variables('intLBFrontendPortRangeStartSSH')]",
                                            "frontendPortRangeEnd": "[variables('intLBFrontendPortRangeEndSSH')]",
                                            "backendPort": "[variables('natBackendPort')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('intLBInboundNatPoolHTTPS')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPortRangeStart": "[variables('intLBFrontendPortRangeStartHTTPS')]",
                                            "frontendPortRangeEnd": "[variables('intLBFrontendPortRangeEndHTTPS')]",
                                            "backendPort": "[variables('natBackendPortHTTPS')]"
                                        }
                                    }
                                ],
                                "loadBalancingRules": [
                                    {
                                        "name": "[concat(variables('externalLoadBalancerName'), '-rule-http')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "backendAddressPool": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/',variables('loadBalancerBackendIPPoolNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPort": 80,
                                            "backendPort": 80,
                                            "loadDistribution": "SourceIP",
                                            "probe": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/tcpProbe')]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[concat(variables('externalLoadBalancerName'), '-rule-https')]",
                                        "properties": {
                                            "frontendIPConfiguration": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')),'/frontendIPConfigurations/', variables('extLBFrontendIPConfigNameSubnet1'))]"
                                            },
                                            "backendAddressPool": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/backendAddressPools/',variables('loadBalancerBackendIPPoolNameSubnet1'))]"
                                            },
                                            "protocol": "Tcp",
                                            "frontendPort": 443,
                                            "backendPort": 443,
                                            "loadDistribution": "SourceIP",
                                            "probe": {
                                                "id": "[concat(resourceId(variables('vNetResourceGroupName'), 'Microsoft.Network/loadBalancers', variables('externalLoadBalancerName')), '/probes/tcpProbe')]"
                                            }
                                        }
                                    }
                                ],
                                "probes": [
                                    {
                                        "name": "tcpProbe",
                                        "properties": {
                                            "protocol": "Tcp",
                                            "port": 22,
                                            "intervalInSeconds": 5,
                                            "numberOfProbes": 3
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachineScaleSets",
                            "apiVersion": "2019-03-01",
                            "name": "[variables('vmssNameBYOL')]",
                            "location": "[variables('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'))]",
                                "[concat('Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'))]",
                                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
                            ],
                            "plan": {
                                "name": "[variables('fgtvmImageBYOL').sku]",
                                "publisher": "[variables('fgtvmImageBYOL').publisher]",
                                "product": "[variables('fgtvmImageBYOL').offer]"
                            },
                            "sku": {
                                "name": "[parameters('InstanceType')]",
                                "tier": "Standard",
                                "capacity": 0
                            },
                            "properties": {
                                "overprovision": false,
                                "upgradePolicy": {
                                    "mode": "Manual"
                                },
                                "virtualMachineProfile": {
                                    "storageProfile": {
                                        "osDisk": {
                                            "createOption": "FromImage",
                                            "caching": "ReadWrite"
                                        },
                                        "dataDisks": [
                                            {
                                                "diskSizeGB": 30,
                                                "lun": 1,
                                                "createOption": "Empty"
                                            }
                                        ],
                                        "imageReference": "[variables('fgtvmImageBYOL')]"
                                    },
                                    "diagnosticsProfile": {
                                        "bootDiagnostics": {
                                            "enabled": true,
                                            "storageUri": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net')]"
                                        }
                                    },
                                    "osProfile": {
                                        "computerNamePrefix": "[variables('vmssNameBYOL')]",
                                        "adminUsername": "[parameters('adminUsername')]",
                                        "customData": "[base64(variables('userdataBYOL'))]",
                                        "adminPassword": "[parameters('adminPassword')]"
                                    },
                                    "networkProfile": {
                                        "networkInterfaceConfigurations": [
                                            {
                                                "name": "[concat(variables('vmssNameBYOL'),'-nic-subnet1')]",
                                                "properties": {
                                                    "primary": true,
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet1IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet1Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet1'))]"
                                                                    }
                                                                ],
                                                                "loadBalancerInboundNatPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/', variables('extLBInboundNatPoolSSH'))]"
                                                                    },
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/', variables('extLBInboundNatPoolHTTPS'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNameBYOL'),'-nic-subnet2')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet2IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet2Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet2'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNameBYOL'),'-nic-subnet3')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet3IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet3Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet3'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNameBYOL'),'-nic-subnet4')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet4IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet4Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet4'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        {
                            "type": "Microsoft.Insights/autoscaleSettings",
                            "apiVersion": "2015-04-01",
                            "name": "[concat(variables('uniqueResourceNamePrefix'),'-autoscale-byol')]",
                            "location": "[variables('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]"
                            ],
                            "properties": {
                                "name": "[concat(variables('uniqueResourceNamePrefix'),'-autoscale-byol')]",
                                "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNameBYOL'))]",
                                "enabled": false,
                                "profiles": [
                                    {
                                        "name": "[concat(variables('uniqueResourceNamePrefix'),'-deployed-profile')]",
                                        "capacity": {
                                            "minimum": "[parameters('MinBYOLInstanceCount')]",
                                            "maximum": "[parameters('MaxBYOLInstanceCount')]",
                                            "default": "[parameters('BYOLInstanceCount')]"
                                        },
                                        "rules": "[variables('autoscalingSettings')[variables('licensingModel')].byol]"
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Insights/autoscaleSettings",
                            "apiVersion": "2015-04-01",
                            "name": "[concat(variables('uniqueResourceNamePrefix'),'-autoscale-payg')]",
                            "location": "[variables('location')]",
                            "dependsOn": [
                                "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]"
                            ],
                            "properties": {
                                "name": "[concat(variables('uniqueResourceNamePrefix'),'-autoscale-payg')]",
                                "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  variables('vNetResourceGroupName'), '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssNamePAYG'))]",
                                "enabled": true,
                                "profiles": [
                                    {
                                        "name": "[concat(variables('uniqueResourceNamePrefix'),'-deployed-profile')]",
                                        "capacity": {
                                            "minimum": "[parameters('MinPAYGInstanceCount')]",
                                            "maximum": "[parameters('MaxPAYGInstanceCount')]",
                                            "default": "[parameters('PAYGInstanceCount')]"
                                        },
                                        "rules": "[variables('autoscalingSettings')[variables('licensingModel')].payg]"
                                    }
                                ]
                            }
                        },
                        {
                            "type": "Microsoft.Compute/virtualMachineScaleSets",
                            "name": "[variables('vmssNamePAYG')]",
                            "location": "[variables('location')]",
                            "apiVersion": "2019-03-01",
                            "dependsOn": [
                                "[concat('Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'))]",
                                "[concat('Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'))]",
                                "[concat('Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
                            ],
                            "plan": {
                                "name": "[variables('fgtvmImagePAYG').sku]",
                                "publisher": "[variables('fgtvmImagePAYG').publisher]",
                                "product": "[variables('fgtvmImagePAYG').offer]"
                            },
                            "sku": {
                                "name": "[parameters('InstanceType')]",
                                "tier": "Standard",
                                "capacity": "[parameters('paygInstanceCount')]"
                            },
                            "properties": {
                                "overprovision": false,
                                "upgradePolicy": {
                                    "mode": "Manual"
                                },
                                "virtualMachineProfile": {
                                    "storageProfile": {
                                        "osDisk": {
                                            "createOption": "FromImage",
                                            "caching": "ReadWrite"
                                        },
                                        "dataDisks": [
                                            {
                                                "diskSizeGB": 30,
                                                "lun": 1,
                                                "createOption": "Empty"
                                            }
                                        ],
                                        "imageReference": "[variables('fgtvmImagePAYG')]"
                                    },
                                    "diagnosticsProfile": {
                                        "bootDiagnostics": {
                                            "enabled": true,
                                            "storageUri": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net')]"
                                        }
                                    },
                                    "priority": "Low",
                                    "evictionPolicy": "delete",
                                    "osProfile": {
                                        "computerNamePrefix": "[variables('vmssNamePAYG')]",
                                        "customData": "[base64(variables('userdataPAYG'))]",
                                        "adminUsername": "[parameters('adminUsername')]",
                                        "adminPassword": "[parameters('adminPassword')]"
                                    },
                                    "networkProfile": {
                                        "networkInterfaceConfigurations": [
                                            {
                                                "name": "[concat(variables('vmssNamePAYG'),'-nic-subnet1')]",
                                                "properties": {
                                                    "primary": true,
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet1IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet1Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet1'))]"
                                                                    }
                                                                ],
                                                                "loadBalancerInboundNatPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/', variables('intLBInboundNatPoolSSH'))]"
                                                                    },
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('externalLoadBalancerName'), '/inboundNatPools/', variables('intLBInboundNatPoolHTTPS'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNamePAYG'),'-nic-subnet2')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet2IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet2Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet2'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNamePAYG'),'-nic-subnet3')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet3IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet3Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet3'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "name": "[concat(variables('vmssNamePAYG'),'-nic-subnet4')]",
                                                "properties": {
                                                    "primary": false,
                                                    "enableIPForwarding": "true",
                                                    "ipConfigurations": [
                                                        {
                                                            "name": "[variables('subnet4IPConfigName')]",
                                                            "properties": {
                                                                "Subnet": {
                                                                    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'), '/Subnets/', variables('subnet4Name'))]"
                                                                },
                                                                "loadBalancerBackendAddressPools": [
                                                                    {
                                                                        "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/loadBalancers/', variables('internalLoadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackendIPPoolNameSubnet4'))]"
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[variables('databaseAccountName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[variables('databaseAccountName')]",
                "databaseAccountOfferType": "Standard"
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDB/databaseAccounts/apis/databases",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/', variables('databaseAccountName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('databaseName')]"
                },
                "options": {
                    "throughput": "[variables('databaseSharedThroughput')]"
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/FortiGateAutoscale')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "FortiGateAutoscale",
                    "partitionKey": {
                        "paths": [
                            "/instanceId"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/FortiGateMasterElection')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "FortiGateMasterElection",
                    "partitionKey": {
                        "paths": [
                            "/scalingGroupName"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/FortiAnalyzer')]",
            "condition": "[variables('enableFortiAnalyzer')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "FortiAnalyzer",
                    "partitionKey": {
                        "paths": [
                            "/instanceId"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/LicenseStock')]",
            "condition": "[variables('enableHybridLicensing')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "LicenseStock",
                    "partitionKey": {
                        "paths": [
                            "/checksum"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/LicenseUsage')]",
            "condition": "[bool(variables('enableHybridLicensing'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "LicenseUsage",
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/CustomLog')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "CustomLog",
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/VmInfoCache')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "VmInfoCache",
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2016-03-31",
            "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
            "name": "[concat(variables('databaseAccountName'), '/sql/', variables('databaseName'), '/Settings')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Settings",
                    "partitionKey": {
                        "paths": [
                            "/settingKey"
                        ],
                        "kind": "Hash"
                    },
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "includedPaths": [
                            {
                                "path": "/*",
                                "indexes": [
                                    {
                                        "kind": "Range",
                                        "dataType": "number",
                                        "precision": -1
                                    },
                                    {
                                        "kind": "Range",
                                        "dataType": "string",
                                        "precision": -1
                                    }
                                ]
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    }
                }
            }
        },
        {
            "apiVersion": "2015-04-01",
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('hostingPlanName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "computeMode": "Dynamic",
                "sku": "Dynamic"
            }
        },
        {
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccountName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', variables('databaseAccountName'), 'sql', variables('databaseName'))]"
            ],
            "apiVersion": "2015-04-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionAppName')]",
            "kind": "functionapp",
            "location": "[variables('location')]",
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "[if(variables('enableAzureAppInsights'), 'APPINSIGHTS_INSTRUMENTATIONKEY', 'DEPLOYED_APPINSIGHTS')]",
                            "value": "[if(variables('enableAzureAppInsights'), reference(resourceId('Microsoft.Insights/components/', variables('functionAppInsightName')), '2018-05-01-preview').InstrumentationKey, 'false')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "8.11.1"
                        },
                        {
                            "name": "AZURE_STORAGE_ACCESS_KEY",
                            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value]"
                        },
                        {
                            "name": "AZURE_STORAGE_ACCOUNT",
                            "value": "[variables('storageAccountName')]"
                        },
                        {
                            "name": "RESOURCE_GROUP",
                            "value": "[variables('vNetResourceGroupName')]"
                        },
                        {
                            "name": "REST_APP_ID",
                            "value": "[parameters('RestAppID')]"
                        },
                        {
                            "name": "REST_API_MASTER_KEY",
                            "value": "[listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccountName')), '2016-03-31').primaryMasterKey]"
                        },
                        {
                            "name": "REST_APP_SECRET",
                            "value": "[parameters('RestAppSecret')]"
                        },
                        {
                            "name": "AUTOSCALE_DB_ACCOUNT",
                            "value": "[variables('databaseAccountName')]"
                        },
                        {
                            "name": "SCRIPT_TIMEOUT",
                            "value": "[parameters('ScriptTimeout')]"
                        },
                        {
                            "name": "SUBSCRIPTION_ID",
                            "value": "[subscription().subscriptionId]"
                        },
                        {
                            "name": "TENANT_ID",
                            "value": "[subscription().tenantId]"
                        },
                        {
                            "name": "WEBSITE_RUN_FROM_ZIP",
                            "value": "[parameters('PackageResURL')]"
                        },
                        {
                            "name": "DEBUG_SAVE_CUSTOM_LOG",
                            "value": "true"
                        },
                        {
                            "name": "DEBUG_LOGGER_OUTPUT_QUEUE_ENABLED",
                            "value": "true"
                        },
                        {
                            "name": "DEBUG_LOGGER_TIMEZONE_OFFSET",
                            "value": "0"
                        },
                        {
                            "name": "ASSET_STORAGE_KEY_PREFIX",
                            "value": ""
                        },
                        {
                            "name": "ASSET_STORAGE_NAME",
                            "value": ""
                        },
                        {
                            "name": "AUTOSCALE_HANDLER_URL",
                            "value": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/api/fgt-asg-handler')]"
                        },
                        {
                            "name": "BYOL_SCALING_GROUP_NAME",
                            "value": "[variables('vmssNameBYOL')]"
                        },
                        {
                            "name": "BYOL_SCALING_GROUP_DESIRED_CAPACITY",
                            "value": "[parameters('BYOLInstanceCount')]"
                        },
                        {
                            "name": "BYOL_SCALING_GROUP_MAX_SIZE",
                            "value": "[parameters('MaxBYOLInstanceCount')]"
                        },
                        {
                            "name": "BYOL_SCALING_GROUP_MIN_SIZE",
                            "value": "[parameters('MinBYOLInstanceCount')]"
                        },
                        {
                            "name": "CUSTOM_ID",
                            "value": ""
                        },
                        {
                            "name": "DEPLOYMENT_SETTINGS_SAVED",
                            "value": "true"
                        },
                        {
                            "name": "DYNAMIC_NAT_GATEWAY_ROUTE_TABLES",
                            "value": ""
                        },
                        {
                            "name": "ENABLE_DYNAMIC_NAT_GATEWAY",
                            "value": "false"
                        },
                        {
                            "name": "ENABLE_FORTIGATE_ELB",
                            "value": "true"
                        },
                        {
                            "name": "ENABLE_HYBRID_LICENSING",
                            "value": "true"
                        },
                        {
                            "name": "ENABLE_INTERNAL_ELB",
                            "value": "false"
                        },
                        {
                            "name": "ENABLE_SECOND_NIC",
                            "value": "true"
                        },
                        {
                            "name": "ENABLE_VM_INFO_CACHE",
                            "value": "true"
                        },
                        {
                            "name": "FORTIGATE_ADMIN_PORT",
                            "value": "[variables('natBackendPortHTTPS')]"
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_ELB_DNS",
                            "value": ""
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_PROTECTED_SUBNET1",
                            "value": "[variables('subnet2Name')]"
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_PROTECTED_SUBNET2",
                            "value": "[variables('subnet2Name')]"
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_SUBNET1",
                            "value": "[variables('subnet1Name')]"
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_SUBNET2",
                            "value": "[variables('subnet1Name')]"
                        },
                        {
                            "name": "FORTIGATE_AUTOSCALE_VPC_ID",
                            "value": "[variables('vnetName')]"
                        },
                        {
                            "name": "FORTIGATE_LICENSE_STORAGE_KEY_PREFIX",
                            "value": "[variables('licenseAssetKeyPrefix')]"
                        },
                        {
                            "name": "FORTIGATE_PROTECTED_INTERNAL_ELB_DNS",
                            "value": ""
                        },
                        {
                            "name": "FORTIGATE_PSK_SECRET",
                            "value": "[parameters('FortiGatePSKSecret')]"
                        },
                        {
                            "name": "FORTIGATE_SYNC_INTERFACE",
                            "value": "port1"
                        },
                        {
                            "name": "FORTIGATE_TRAFFIC_PORT",
                            "value": "[variables('natBackendPortHTTPS')]"
                        },
                        {
                            "name": "GET_LICENSE_GRACE_PERIOD",
                            "value": "[parameters('GetLicenseGracePeriod')]"
                        },
                        {
                            "name": "HEARTBEAT_INTERVAL",
                            "value": "[parameters('HeartBeatInterval')]"
                        },
                        {
                            "name": "HEART_BEAT_DELAY_ALLOWANCE",
                            "value": "[parameters('HeartBeatDelayAllowance')]"
                        },
                        {
                            "name": "HEART_BEAT_LOSS_COUNT",
                            "value": "[parameters('HeartBeatLossCount')]"
                        },
                        {
                            "name": "MASTER_ELECTION_TIMEOUT",
                            "value": "[parameters('MasterElectionTimeout')]"
                        },
                        {
                            "name": "MASTER_ELECTION_NO_WAIT",
                            "value": "true"
                        },
                        {
                            "name": "MASTER_SCALING_GROUP_NAME",
                            "value": "[variables('vmssNameMaster')]"
                        },
                        {
                            "name": "PAYG_SCALING_GROUP_NAME",
                            "value": "[variables('vmssNamePAYG')]"
                        },
                        {
                            "name": "REQUIRED_CONFIG_SET",
                            "value": "extraports-yes, extrastaticroutes-yes"
                        },
                        {
                            "name": "REQUIRED_DB_TABLE",
                            "value": "[variables('databaseTableNameList')]"
                        },
                        {
                            "name": "RESOURCE_TAG_PREFIX",
                            "value": ""
                        },
                        {
                            "name": "SCALING_GROUP_DESIRED_CAPACITY",
                            "value": "[parameters('PAYGInstanceCount')]"
                        },
                        {
                            "name": "SCALING_GROUP_MAX_SIZE",
                            "value": "[parameters('MaxPAYGInstanceCount')]"
                        },
                        {
                            "name": "SCALING_GROUP_MIN_SIZE",
                            "value": "[parameters('PAYGInstanceCount')]"
                        },
                        {
                            "name": "UNIQUE_ID",
                            "value": ""
                        },
                        {
                            "name": "VM_INFO_CACHE_TIME",
                            "value": "3600"
                        }
                    ]
                }
            }
        },
        {
            "condition": "[variables('enableAzureAppInsights')]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2018-05-01-preview",
            "name": "[variables('functionAppInsightName')]",
            "kind": "web",
            "location": "[variables('location')]",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('functionAppName')]"
            }
        }
    ],
    "outputs": {
        "uniqueResourceNamePrefix": {
            "type": "string",
            "value": "[variables('uniqueResourceNamePrefix')]"
        },
        "resourceGroupName": {
            "type": "string",
            "value": "[variables('resourceGroupName')]"
        },
        "vNetResourceGroupName": {
            "type": "string",
            "value": "[variables('vNetResourceGroupName')]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        },
        "storageAccountAccessKey": {
            "type": "string",
            "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-04-01').keys[0].value]"
        },
        "configsetAssetKeyPrefix": {
            "type": "string",
            "value": "[variables('configsetAssetKeyPrefix')]"
        },
        "byolScaleSetName": {
            "type": "string",
            "value": "[variables('vmssNameBYOL')]"
        },
        "byolAutoscaleSettingsName": {
            "type": "string",
            "value": "[concat(variables('uniqueResourceNamePrefix'),'-autoscale-byol')]"
        },
        "paygScaleSetName": {
            "type": "string",
            "value": "[variables('vmssNamePAYG')]"
        },
        "licenseAssetKeyPrefix": {
            "type": "string",
            "value": "[variables('licenseAssetKeyPrefix')]"
        },
        "byolScaleSetDefaultSize": {
            "type": "int",
            "value": "[parameters('BYOLInstanceCount')]"
        },
        "byolScaleSetMinSize": {
            "type": "int",
            "value": "[parameters('MinBYOLInstanceCount')]"
        },
        "byolScaleSetMaxSize": {
            "type": "int",
            "value": "[parameters('MaxBYOLInstanceCount')]"
        },
        "paygScaleSetDefaultSize": {
            "type": "int",
            "value": "[parameters('PAYGInstanceCount')]"
        },
        "paygScaleSetMinSize": {
            "type": "int",
            "value": "[parameters('MinPAYGInstanceCount')]"
        },
        "paygScaleSetMaxSize": {
            "type": "int",
            "value": "[parameters('MaxPAYGInstanceCount')]"
        },
        "fgtLicensingModel": {
            "type": "string",
            "value": "[variables('licensingModelName')]"
        }
    }
}
